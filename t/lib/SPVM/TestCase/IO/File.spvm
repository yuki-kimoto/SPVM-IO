class TestCase::IO::File {
  use IO::File;
  use StringList;
  use Fn;
  use Array;
  use Sys::IO::Constant as IOC;
  
  our $TEST_DIR : rw cache string;
  
  our $TEST_TMP_DIR : rw cache string;
  
  static method slurp : string ($file : string) {
    
    my $fh = IO->open("<", $file);
    
    my $content = $fh->getlines;
    
    return $content;
  }
  
  static method flush : int () {
    
    my $file = "$TEST_TMP_DIR/io_file_test_flush.txt";
    
    {
      my $io_file = IO::File->new($file, ">");
      
      $io_file->print("He");
      $io_file->flush;
      $io_file->print("llo");
      $io_file->flush;
    }
    
    unless (&slurp($file) eq "Hello") {
      return 0;
    }
    
    return 1;
  }

  static method close : int () {
    
    my $file = "$TEST_TMP_DIR/io_file_test_flush.txt";
    
    {
      my $io_file = IO::File->new($file, ">");
      
      $io_file->print("He");
      $io_file->print("llo");
      $io_file->close;
    }
    
    unless (&slurp($file) eq "Hello") {
      return 0;
    }
    
    return 1;
  }

  static method autoflush : int () {
    
    my $file = "$TEST_TMP_DIR/io_file_test_print.txt";
    
    {
      my $io_file = IO::File->new($file, ">");
      unless ($io_file) {
        return 0;
      }
      
      my $io_file_default = $io_file->autoflush;
      unless ($io_file_default == 0) {
        return 0;
      }
      
      $io_file->set_autoflush(1);
      unless ($io_file->autoflush == 1) {
        return 0;
      }
      
      $io_file->print("Hello");
    }
    
    unless (&slurp($file) eq "Hello") {
      return 0;
    }
    
    return 1;
  }
  
  static method print : int () {
    
    my $file = "$TEST_TMP_DIR/io_file_test_print.txt";
    
    {
      my $io_file = IO::File->new($file, ">");
      unless ($io_file) {
        return 0;
      }
      
      $io_file->print("Hello");
    }
    
    unless (&slurp($file) eq "Hello") {
      return 0;
    }
    
    return 1;
  }
  
  static method write : int () {
    
    my $file = "$TEST_TMP_DIR/io_file_test_write.txt";
    
    {
      my $io_file = IO::File->new($file, ">");
      unless ($io_file) {
        return 0;
      }
      
      $io_file->write("Hello");
    }
    
    unless (&slurp($file) eq "Hello") {
      return 0;
    }
    
    return 1;
  }
  
  static method print_newline : int () {
    
    my $file = "$TEST_TMP_DIR/io_file_test_print_newline.txt";
    
    {
      my $io_file = IO::File->new($file, ">");
      unless ($io_file) {
        return 0;
      }
      
      $io_file->print("\n");
    }
    
    unless (&slurp($file) eq "\x0A") {
      return 0;
    }
    
    return 1;
  }
  
  static method print_long_lines : int () {
    my $file = "$TEST_TMP_DIR/io_file_test_print_long_lines.txt";
    
    {
      my $io_file = IO::File->new($file, ">");
      unless ($io_file) {
        return 0;
      }
      
      $io_file->print("AAAAAAAAAAAAA\nBBBBBBBBBBBBBBBBBBB\nCCCCCCCCCCCCCCCCCCCCCCCCCCC\nDDDDDDDDDDDDDDDDDDDDDDDDD\nEEEEEEEEEEEEEEEEEEEEEE\nFFFFFFFFFFFFFF\n");
    }
    
    unless (&slurp($file) eq "AAAAAAAAAAAAA\x0ABBBBBBBBBBBBBBBBBBB\x0ACCCCCCCCCCCCCCCCCCCCCCCCCCC\x0ADDDDDDDDDDDDDDDDDDDDDDDDD\x0AEEEEEEEEEEEEEEEEEEEEEE\x0AFFFFFFFFFFFFFF\x0A") {
      return 0;
    }
    
    return 1;
  }
  
  static method open : int () {
    my $file = "$TEST_TMP_DIR/fread.txt";
    
    {
      my $io_file = IO::File->new($file, "<");
      unless ($io_file) {
        return 0;
      }
    }
    
    {
      eval {
        IO::File->new($file, "ppp");
      };
      
      unless ($@) {
        return 0;
      }
      $@ = undef;
    }
    
    return 1;
  }
  
  static method open_with_int_mode : int () {
    
    {
      my $file = "$TEST_TMP_DIR/open_with_int_mode_hello.txt";
      
      {
        my $io_file = IO::File->new($file, IOC->O_WRONLY|IOC->O_CREAT|IOC->O_TRUNC, 0644);
      }
      
      {
        my $io_file = IO::File->new($file, IOC->O_WRONLY);
        $io_file->print("Hello");
      }
      
      {
        my $io_file = IO::File->new($file, IOC->O_RDONLY);
        
        unless ($io_file->getlines eq "Hello") {
          return 0;
        }
      }
      
      {
        my $io_file = IO::File->new($file, IOC->O_RDWR|IOC->O_TRUNC);
        
        $io_file->print("Good");
        
        $io_file->seek(0, IOC->SEEK_SET);
        
        unless ($io_file->getlines eq "Good") {
          return 0;
        }
      }
      
      {
        my $io_file = IO::File->new($file, IOC->O_WRONLY|IOC->O_APPEND);
        
        $io_file->print("Bad");
      }
      
      {
        my $io_file = IO::File->new($file, IOC->O_RDONLY);
        
        unless ($io_file->getlines eq "GoodBad") {
          return 0;
        }
      }
      
      {
        eval { IO::File->new($file, IOC->O_WRONLY|IOC->O_CREAT|IOC->O_TRUNC|IOC->O_EXCL); }
        
        warn "[Test Output]open_with_int_mode:IOC->O_EXCL:" . Fn->substr($@, 0, 150) . ".";
        
        unless ($@) {
          return 0;
        }
      }
      
      {
        my $io_file = IO::File->new($file, IOC->O_RDWR|IOC->O_APPEND);
        
        $io_file->print("Yes");
      }
      
      {
        my $io_file = IO::File->new($file, IOC->O_RDONLY);
        
        unless ($io_file->getlines eq "GoodBadYes") {
          return 0;
        }
      }
      
    }
    
    return 1;
  }
  
  static method read : int () {
    my $file = "$TEST_TMP_DIR/fread.txt";
    
    {
      my $io_file = IO::File->new($file, "<");
      unless ($io_file) {
        die "Can't open file $file";
      }
      
      my $buffer = (mutable string)new_string_len 5;
      {
        my $read_length = $io_file->read($buffer);
        unless ((string)$buffer eq "abcd\n") {
          return 0;
        }
        unless ($read_length == 5) {
          return 0;
        }
      }
      
      {
        my $read_length = $io_file->read($buffer, length $buffer);
        unless ((string)$buffer eq "fghi\n") {
          return 0;
        }
        unless ($read_length == 5) {
          return 0;
        }
      }
      {
        my $read_length = $io_file->read($buffer, length $buffer);
        unless (Fn->substr($buffer, 0, 4) eq "klm\n") {
          return 0;
        }
        unless ($read_length == 4) {
          return 0;
        }
      }
    }
    
    return 1;
  }
  
  static method getline : int () {
    my $file = "$TEST_TMP_DIR/fread.txt";
    
    my $io_file = IO::File->new($file, "<");
    unless ($io_file) {
      die "Can't open file $file";
    }
    
    {
      my $line = $io_file->getline;
      unless ($line eq "abcd\n") {
        return 0;
      }
    }

    {
      my $line = $io_file->getline;
      unless ($line eq "fghi\n") {
        return 0;
      }
    }

    {
      my $line = $io_file->getline;
      unless ($line eq "klm\n") {
        return 0;
      }
    }

    {
      my $line = $io_file->getline;
      unless ($line == undef) {
        return 0;
      }
    }
    return 1;
  }

  static method getline_while : int () {
    my $file = "$TEST_TMP_DIR/fread.txt";
    
    my $io_file = IO::File->new($file, "<");
    unless ($io_file) {
      die "Can't open file $file";
    }
    
    my $lstrings = StringList->new((string[])undef);
    while (my $line = $io_file->getline) {
      $lstrings->push($line);
    }

    my $strings = $lstrings->to_array;
    

    unless (Array->equals_string($strings, ["abcd\n", "fghi\n", "klm\n"])) {
      return 0;
    }
    
    return 1;
  }

  static method getline_eof : int () {
    my $file = "$TEST_TMP_DIR/file_eof.txt";
    
    my $io_file = IO::File->new($file, "<");
    unless ($io_file) {
      die "Can't open file $file";
    }
    
    {
      my $line = $io_file->getline;
      unless ($line eq "abcd\n") {
        return 0;
      }
    }

    {
      my $line = $io_file->getline;
      unless ($line eq "fghi\n") {
        return 0;
      }
    }
    
    {
      my $line = $io_file->getline;
      unless ($line eq "\n") {
        return 0;
      }
    }

    {
      my $line = $io_file->getline;
      unless ($line eq "klm") {
        return 0;
      }
    }

    {
      my $line = $io_file->getline;
      unless ($line == undef) {
        return 0;
      }
    }
    return 1;
  }

  static method getline_long_line : int () {
    my $file = "$TEST_TMP_DIR/long_line.txt";
    
    my $io_file = IO::File->new($file, "<");
    unless ($io_file) {
      die "Can't open file $file";
    }
    
    {
      my $line = $io_file->getline;
      unless ($line eq "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n") {
        return 0;
      }
    }

    {
      my $line = $io_file->getline;
      unless ($line eq "fghi\n") {
        return 0;
      }
    }

    {
      my $line = $io_file->getline;
      unless ($line eq "klm\n") {
        return 0;
      }
    }

    {
      my $line = $io_file->getline;
      unless ($line == undef) {
        return 0;
      }
    }
    return 1;
  }

  static method getline_chompr : int () {
    my $file = "$TEST_TMP_DIR/fread.txt";
    
    my $io_file = IO::File->new($file, "<");
    unless ($io_file) {
      die "Can't open file $file";
    }
    
    {
      my $line = $io_file->getline;
      $line = Fn->chompr($line);
      unless ($line eq "abcd") {
        return 0;
      }
    }

    {
      my $line = $io_file->getline;
      $line = Fn->chompr($line);
      unless ($line eq "fghi") {
        return 0;
      }
    }

    {
      my $line = $io_file->getline;
      $line = Fn->chompr($line);
      unless ($line eq "klm") {
        return 0;
      }
    }

    {
      my $line = $io_file->getline;
      unless ($line == undef) {
        return 0;
      }
    }
    return 1;
  }

  static method getline_chompr_while : int () {
    my $file = "$TEST_TMP_DIR/fread.txt";
    my $io_file = IO::File->new($file, "<");
    unless ($io_file) {
      die "Can't open file $file";
    }
    
    my $lstrings = StringList->new((string[])undef);
    while (my $line = $io_file->getline) {
      $line = Fn->chompr($line);
      $lstrings->push($line);
    }
    my $strings = $lstrings->to_array;
    
    unless (Array->equals_string($strings, ["abcd", "fghi", "klm"])) {
      return 0;
    }
    
    return 1;
  }

  static method getline_chompr_eof : int () {
    my $file = "$TEST_TMP_DIR/file_eof.txt";
    my $io_file = IO::File->new($file, "<");
    unless ($io_file) {
      die "Can't open file $file";
    }
    
    {
      my $line = $io_file->getline;
      $line = Fn->chompr($line);
      unless ($line eq "abcd") {
        return 0;
      }
    }

    {
      my $line = $io_file->getline;
      $line = Fn->chompr($line);
      unless ($line eq "fghi") {
        return 0;
      }
    }
    
    {
      my $line = $io_file->getline;
      $line = Fn->chompr($line);
      unless ($line eq "") {
        return 0;
      }
    }

    {
      my $line = $io_file->getline;
      $line = Fn->chompr($line);
      unless ($line eq "klm") {
        return 0;
      }
    }

    {
      my $line = $io_file->getline;
      unless ($line == undef) {
        return 0;
      }
    }
    return 1;
  }

  static method getline_chompr_long_line : int () {
    my $file = "$TEST_TMP_DIR/long_line.txt";
    my $io_file = IO::File->new($file, "<");
    unless ($io_file) {
      die "Can't open file $file";
    }
    
    {
      my $line = $io_file->getline;
      $line = Fn->chompr($line);
      unless ($line eq "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa") {
        return 0;
      }
    }

    {
      my $line = $io_file->getline;
      $line = Fn->chompr($line);
      unless ($line eq "fghi") {
        return 0;
      }
    }

    {
      my $line = $io_file->getline;
      $line = Fn->chompr($line);
      unless ($line eq "klm") {
        return 0;
      }
    }

    {
      my $line = $io_file->getline;
      unless ($line == undef) {
        return 0;
      }
    }
    return 1;
  }

  static method getlines : int () {
    my $file = "$TEST_TMP_DIR/fread.txt";
    {
      my $io_file = IO::File->new($file, "<");
      
      my $string = $io_file->getlines;
      
      unless ($string eq "abcd\nfghi\nklm\n") {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method read_and_seek : int () {
    my $file = "$TEST_TMP_DIR/fread.txt";
    {
      my $io_file = IO::File->new($file, "<");
      unless ($io_file) {
        die "Can't open file $file";
      }
      
      unless ($io_file->tell == 0) {
        return 0;
      }
      
      $io_file->seek(1, Sys::IO::Constant->SEEK_SET);
      
      unless ($io_file->tell == 1) {
        return 0;
      }
      
    }
    
    return 1;
  }
  
}
