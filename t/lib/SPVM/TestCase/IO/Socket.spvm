class TestCase::IO::Socket {
  use IO::Socket;
  use IO::Socket::IP;
  use IO::Socket::UNIX;
  use Go::Sync::WaitGroup;
  use Go;
  use Fn;
  use Sys::Socket::Constant as SOCKET;
  use TestUtil;
  
  static method fileno : int ($port : int) {
    
    # Socket
    my $host = "127.0.0.1";
    my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port});
    
    my $fileno = $socket->fileno;
    
    unless ($fileno > 2) {
      warn $fileno;
      return 0;
    }
    
    return 1;
  }
  
  static method goroutine : int ($port : int) {
    
    my $wg = Go::Sync::WaitGroup->new;
    
    $wg->add(2);
    
    Go->go([$wg : Go::Sync::WaitGroup, $port : int] method : void () {
      Fn->defer([$wg : Go::Sync::WaitGroup] method : void () {
        $wg->done;
      });
      
      # Socket
      my $host = "127.0.0.1";
      my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port});
      
      my $send_buffer = "GET / HTTP/1.0\r\n\r\n";
      $socket->send($send_buffer);
      
      $socket->shutdown(SOCKET->SHUT_WR);
      
      my $recv_buffer = (mutable string)new_string_len 100;
      while (1) {
        my $recv_length = $socket->recv($recv_buffer);
        
        if ($recv_length < 0) {
          die "Read error";
        }
        
        # print((string)sliceb($recv_buffer, 0, $recv_length));
        
        if ($recv_length < length $recv_buffer) {
          last;
        }
      }
      
      $socket->close;
    });
    
    Go->go([$wg : Go::Sync::WaitGroup, $port : int] method : void () {
      Fn->defer([$wg : Go::Sync::WaitGroup] method : void () {
        $wg->done;
      });
      
      # Socket
      my $host = "127.0.0.1";
      my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port});
      
      my $send_buffer = "GET / HTTP/1.0\r\n\r\n";
      $socket->send($send_buffer);
      
      $socket->shutdown(SOCKET->SHUT_WR);
      
      my $recv_buffer = (mutable string)new_string_len 100;
      while (1) {
        my $recv_length = $socket->recv($recv_buffer);
        
        if ($recv_length < 0) {
          die "Read error";
        }
        
        # print((string)sliceb($recv_buffer, 0, $recv_length));
        
        if ($recv_length < length $recv_buffer) {
          last;
        }
      }
      
      $socket->close;
    });
    
    Go->gosched;
    
    $wg->wait;
    
    return 1;
  }
  
  static method shutdown : int ($port : int) {
    
    {
      my $host = "127.0.0.1";
      my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port});
      
      $socket->shutdown(SOCKET->SHUT_WR);
    }
    
    return 1;
  }
  
  static method close : int ($port : int) {
    
    {
      my $host = "127.0.0.1";
      my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port});
      
      $socket->close;
    }
    
    return 1;
  }
  
  static method send_recv : int ($port : int) {
    
    {
      my $host = "127.0.0.1";
      my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port});
      
      my $send_buffer = "GET /hello HTTP/1.0\r\nHost: $host\r\n\r\n";
      $socket->send($send_buffer);
      
      $socket->shutdown(SOCKET->SHUT_WR);
      
      my $recv_buffer = (mutable string)new_string_len 1000;
      
      my $recv_length = $socket->recv($recv_buffer);
      
      unless ($recv_length > 0 && $recv_length < 1000) {
        
        warn $recv_length;
        return 0;
      }
      
      Fn->shorten_null_char($recv_buffer);
      
      my $content = $recv_buffer;
      
      unless (Fn->contains($content, "HTTP")) {
        
        warn dump $content;
        return 0;
      }
      
      unless (Fn->contains($content, "hello")) {
        
        warn dump $content;
        return 0;
      }
    }
    return 1;
  }
  
  static method extra : int ($port : int) {
    
    # Basic
    {
      my $host = "127.0.0.1";
      my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port});
      
      my $send_buffer = "GET /hello HTTP/1.0\r\nHost: $host\r\n\r\n";
      $socket->send($send_buffer);
      
      $socket->shutdown(SOCKET->SHUT_WR);
      
      my $recv_buffer = (mutable string)new_string_len 1000;
      
      my $recv_length = $socket->recv($recv_buffer);
      
      unless ($recv_length > 0 && $recv_length < 1000) {
        
        warn $recv_length;
        return 0;
      }
      
      Fn->shorten_null_char($recv_buffer);
      
      my $content = $recv_buffer;
      
      unless (Fn->contains($content, "HTTP")) {
        
        warn dump $content;
        return 0;
      }
      
      unless (Fn->contains($content, "hello")) {
        
        warn dump $content;
        return 0;
      }
      
      $socket->close;
    }
    
    # Auto socket close
    {
      my $host = "127.0.0.1";
      my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port});
      
      my $send_buffer = "GET /hello HTTP/1.0\r\nHost: $host\r\n\r\n";
      $socket->send($send_buffer);
      
      $socket->shutdown(SOCKET->SHUT_WR);
      
      my $recv_buffer = (mutable string)new_string_len 1000;
      
      my $recv_length = $socket->recv($recv_buffer);
      
      unless ($recv_length > 0 && $recv_length < 1000) {
        
        warn $recv_length;
        return 0;
      }
      
      Fn->shorten_null_char($recv_buffer);
      
      my $content = $recv_buffer;
      
      unless (Fn->contains($content, "hello")) {
        
        warn dump $content;
        return 0;
      }
    }
    
    {
      my $host = "127.0.0.1";
      my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port});
      
      my $send_buffer = "GET /hello HTTP/1.0\r\nHost: $host\r\n\r\n";
      $socket->send($send_buffer);
      
      $socket->shutdown(SOCKET->SHUT_WR);
      
      my $recv_buffer = (mutable string)new_string_len 1000;
      
      my $recv_length = $socket->recv($recv_buffer);
      
      unless ($recv_length > 0 && $recv_length < 1000) {
        
        warn $recv_length;
        return 0;
      }
      
      Fn->shorten_null_char($recv_buffer);
      
      my $content = $recv_buffer;
      
      unless (Fn->contains($content, "hello")) {
        
        warn dump $content;
        return 0;
      }
    }
    
    return 1;
  }
  
  static method set_blocking : int ($port : int) {
    
    # blocking
    {
      my $host = "127.0.0.1";
      my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port});
      
      eval { $socket->set_blocking(1); }
      
      unless ($@) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method timeout : int ($port : int) {
    
    {
      my $host = "127.0.0.1";
      my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port});
      
      $socket->set_timeout(10.5);
      
      my $timeout = $socket->timeout;
      
      unless ($timeout == 10.5) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method set_timeout : int ($port : int) {
    
    {
      my $host = "127.0.0.1";
      my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port});
      
      $socket->set_timeout(10.5);
      
      my $timeout = $socket->timeout;
      
      unless ($timeout == 10.5) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method connected : int ($port : int) {
    
    {
      my $host = "127.0.0.1";
      my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port});
      
      my $connected = $socket->connected;
      
      unless ($connected) {
         return 0;
      }
      
      unless ($connected isa Sys::Socket::Sockaddr) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method atmark : int ($port : int) {
    if (Sys::OS->is_windows) {
      die "[Skip Test]Windows do not support atmark method.";
    }
    else {
      my $host = "127.0.0.1";
      my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port});
      
      my $ret = $socket->atmark;
      
      unless ($ret == 0) {
        return 0;
      }
    }
    
    return 1;
  }
  
}

