class TestCase::IO::Select {
  use IO::Select;
  use IO::File;
  use Fn;
  use Array;

  static method add : int () {
    my $select = IO::Select->new;
    
    $select->add(0);
    $select->add(1);
    $select->add(4);
    $select->add(5);
    $select->add(5);
    
    {
      my $fds = $select->fds;
      unless (Array->equals_int($fds, [0, 1, 4, 5])) {
        return 0;
      }
    }
    
    return 1;
  }

  static method remove : int () {
    my $select = IO::Select->new;
    
    $select->add(0);
    $select->add(1);
    $select->add(4);
    $select->add(5);
    
    $select->remove(4);
    $select->remove(6);
    
    {
      my $fds = $select->fds;
      unless (Array->equals_int($fds, [0, 1, 5])) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method exists : int () {
    
    my $select = IO::Select->new;
    
    $select->add(0);
    $select->add(1);
    $select->add(4);
    $select->add(5);
    
    {
      my $ret = $select->exists(4);
      unless ($ret == 1) {
        return 0;
      }
    }
    {
      my $ret = $select->exists(6);
      unless ($ret == 0) {
        return 0;
      }
    }
    
    return 1;
  }

  static method fds : int () {
    my $select = IO::Select->new;
    
    $select->add(0);
    $select->add(1);
    $select->add(4);
    $select->add(5);
    $select->add(5);
    
    {
      my $fds = $select->fds;
      unless (Array->equals_int($fds, [0, 1, 4, 5])) {
        return 0;
      }
    }
    
    return 1;
  }

  static method count : int () {
    my $select = IO::Select->new;
    
    $select->add(0);
    $select->add(1);
    $select->add(4);
    $select->add(5);
    $select->add(5);
    
    {
      my $fds_count = $select->count;
      unless ($fds_count == 4) {
        return 0;
      }
    }
    
    return 1;
  }

  static method can_read : int () {
    my $select = IO::Select->new;
    
    $select->add(0);
    $select->add(1);
    
    {
      my $can_read = $select->can_read(1.1);
      
      unless (@$can_read == 0) {
        return 0;
      }
    }
    
    {
      my $can_read = $select->can_read;
      
      unless (@$can_read == 0) {
        return 0;
      }
    }
    
    return 1;
  }

  static method can_write : int () {
    my $select = IO::Select->new;
    
    $select->add(1);
    $select->add(2);
    
    {
      my $can_write = $select->can_write(1.1);
      
      unless (@$can_write == 2) {
        return 0;
      }

      unless ($can_write->[0] == 1 && $can_write->[1] == 2) {
        return 0;
      }
    }
    
    {
      my $can_write = $select->can_write;
      
      unless (@$can_write == 2) {
        return 0;
      }

      unless ($can_write->[0] == 1 && $can_write->[1] == 2) {
        return 0;
      }
    }
    
    return 1;
  }

  static method has_exception : int () {
    my $select = IO::Select->new;
    
    $select->add(0);
    $select->add(1);
    
    {
      my $has_exception = $select->has_exception(1.1);
      
      unless (@$has_exception == 0) {
        return 0;
      }
    }

=pod TODO: This is needed, but I cannot know the way to test it.


    
    {
      my $has_exception = $select->has_exception;
      
      unless (@$has_exception == 0) {
        return 0;
      }
    }

=cut

    return 1;
  }
}
