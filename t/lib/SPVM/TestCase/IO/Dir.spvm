class TestCase::IO::Dir {
  use IO::Dir;
  use StringList;
  use Sort;
  
  static method TEST_FILES_DIR : string () { return "t/test_files"; }
  
  # Class Methods
  static method new : int () {
    
    my $dir_path = &TEST_FILES_DIR;
    
    {
      my $dh = IO::Dir->new($dir_path);
      
      unless ($dh is_type IO::Dir) {
        return 0;
      }
      
      my $name = $dh->read;
      
      unless ($name) {
        return 0;
      }
    }
    
    {
      my $dh = IO::Dir->new;
      
      unless ($dh is_type IO::Dir) {
        return 0;
      }
      
      eval { $dh->read; }
      
      unless ($@) {
        return 0;
      }
    }
    
    $@ = undef;
    
    return 1;
  }
  
  # Instance Methods
  static method open : int () {
    
    my $dir_path = &TEST_FILES_DIR;
    
    {
      my $dh = IO::Dir->new;
      
      $dh->open($dir_path);
      
      $dh->read;
    }
    
    return 1;
  }
  
  static method read : int () {
    
    my $dir_path = &TEST_FILES_DIR;
    
    {
      my $dh = IO::Dir->new($dir_path);
      
      unless ($dh is_type IO::Dir) {
        return 0;
      }
      
      my $name = $dh->read;
      
      unless ($name) {
        return 0;
      }
      
    }
    
    {
      my $dh = IO::Dir->new($dir_path);
      
      unless ($dh is_type IO::Dir) {
        return 0;
      }
      
      my $dir_names_list = StringList->new;
      
      while (my $name = $dh->read) {
        my $dir_name = $name;
        
        $dir_names_list->push($dir_name);
      }
      
      my $dir_names = $dir_names_list->to_array;
      
      my $match = 0;
      for my $dir_name (@$dir_names) {
        
        if ($dir_name eq "fread.txt") {
          $match = 1;
          last;
        }
      }
      
      unless ($match) {
        return 0;
      }
      
      unless (@$dir_names >= 4) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method seek : int () {
    
    my $dir_path = &TEST_FILES_DIR;
    
    {
      my $dh = IO::Dir->new($dir_path);
      
      my $offset = $dh->tell;
      
      my $name = $dh->read;
      
      $dh->seek($offset);
      
      my $name2 = $dh->read;
      
      unless ($name) {
        return 0;
      }
      
      unless ($name2) {
        return 0;
      }
      
      unless ($name eq $name2) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method tell : int () {
    
    my $dir_path = &TEST_FILES_DIR;
    
    {
      my $dh = IO::Dir->new($dir_path);
      
      my $offset = $dh->tell;
      
      my $name = $dh->read;
      
      $dh->seek($offset);
      
      my $name2 = $dh->read;
      
      unless ($name) {
        return 0;
      }
      
      unless ($name2) {
        return 0;
      }
      
      unless ($name eq $name2) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method rewind : int () {
    
    my $dir_path = &TEST_FILES_DIR;
    
    {
      my $dh = IO::Dir->new($dir_path);
      
      my $name = $dh->read;
      
      $dh->rewind;
      
      my $name2 = $dh->read;
      
      unless ($name) {
        return 0;
      }
      
      unless ($name2) {
        return 0;
      }
      
      unless ($name eq $name2) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method close : int () {
    
    my $dir_path = &TEST_FILES_DIR;
    
    {
      my $dh = IO::Dir->new($dir_path);
      
      $dh->close;
      
      if ($dh->opened) {
        warn $dh->opened;
        return 0;
      }
    }
    
    return 1;
  }
  
  static method opened : int () {
    
    my $dir_path = &TEST_FILES_DIR;
    
    {
      my $dh = IO::Dir->new($dir_path);
      
      unless ($dh->opened) {
        warn $dh->opened;
        return 0;
      }
      
      $dh->close;
      
      if ($dh->opened) {
        warn $dh->opened;
        return 0;
      }
      
    }
    
    return 1;
  }
}
