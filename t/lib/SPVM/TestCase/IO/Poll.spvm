class TestCase::IO::Poll {
  use IO::Poll;
  use Sys::Poll::Constant as POLL;
  use Sort;
  use Array;

  static method new : int () {
    
    my $poll = IO::Poll->new;
    
    unless ($poll is_type IO::Poll) {
      
    }
    
    return 1;
  }

  static method set_mask : int () {
    
    {
      my $poll = IO::Poll->new;
      
      $poll->set_mask(0 => POLL->POLLIN);
      
      my $mask = $poll->mask(0);
      
      unless ($mask == POLL->POLLIN) {
        return 0;
      }
    }
    
    {
      my $poll = IO::Poll->new;
      
      $poll->set_mask(0 => POLL->POLLIN);
      
      $poll->set_mask(1 => POLL->POLLOUT);
      
      my $mask0 = $poll->mask(0);
      
      unless ($mask0 == POLL->POLLIN) {
        return 0;
      }
      
      my $mask1 = $poll->mask(1);
      
      unless ($mask1 == POLL->POLLOUT) {
        return 0;
      }
    }
    
    {
      my $poll = IO::Poll->new;
      
      $poll->set_mask(0 => POLL->POLLIN);
      
      $poll->set_mask(0 => 0);
      
      $poll->set_mask(1 => POLL->POLLOUT);
      
      my $mask0 = $poll->mask(0);
      
      unless ($mask0 == 0) {
        return 0;
      }
      
      my $mask1 = $poll->mask(1);
      
      unless ($mask1 == POLL->POLLOUT) {
        return 0;
      }
    }
    
    return 1;
  }

  static method mask : int () {
    
    {
      my $poll = IO::Poll->new;
      
      $poll->set_mask(0 => POLL->POLLIN);
      
      my $mask = $poll->mask(0);
      
      unless ($mask == POLL->POLLIN) {
        return 0;
      }
    }
    
    {
      my $poll = IO::Poll->new;
      
      my $mask = $poll->mask(0);
      
      unless ($mask == 0) {
        return 0;
      }
    }
    
    {
      my $poll = IO::Poll->new;
      
      $poll->set_mask(0 => POLL->POLLIN);
      
      $poll->remove(0);
      
      my $mask = $poll->mask(0);
      
      unless ($mask == 0) {
        warn $mask;
        return 0;
      }
    }
    
    return 1;
  }
  
  static method fds : int () {
    
    {
      my $poll = IO::Poll->new;
      
      $poll->set_mask(1 => POLL->POLLIN);
      
      my $fds = $poll->fds;
      
      Sort->sort_int_asc($fds);
      
      unless (Array->equals_int($fds, [1])) {
        return 0;
      }
    }
    
    {
      my $poll = IO::Poll->new;
      
      $poll->set_mask(5 => POLL->POLLIN);
      
      $poll->set_mask(3 => POLL->POLLOUT);
      
      my $fds = $poll->fds;
      
      Sort->sort_int_asc($fds);
      
      unless (Array->equals_int($fds, [3, 5])) {
        return 0;
      }
    }

    {
      my $poll = IO::Poll->new;
      
      $poll->set_mask(5 => POLL->POLLIN);
      
      $poll->set_mask(5 => 0);
      
      my $fds = $poll->fds;
      
      Sort->sort_int_asc($fds);
      
      unless (Array->equals_int($fds, new int[0])) {
        warn dump $fds;
        return 0;
      }
    }

    {
      my $poll = IO::Poll->new;
      
      $poll->set_mask(5 => POLL->POLLIN);
      
      $poll->set_mask(5 => 0);
      
      $poll->set_mask(5 => POLL->POLLIN);
      
      my $fds = $poll->fds;
      
      Sort->sort_int_asc($fds);
      
      unless (Array->equals_int($fds, [5])) {
        warn dump $fds;
        return 0;
      }
    }

    {
      my $poll = IO::Poll->new;
      
      $poll->set_mask(5 => POLL->POLLIN);
      
      $poll->set_mask(5 => 0);
      
      $poll->set_mask(1 => POLL->POLLOUT);
      
      $poll->set_mask(19 => POLL->POLLOUT);
      
      $poll->set_mask(10 => POLL->POLLOUT);
      
      $poll->set_mask(1 => 0);
      
      $poll->set_mask(6 => POLL->POLLOUT);
      
      my $fds = $poll->fds;
      
      Sort->sort_int_asc($fds);
      
      unless (Array->equals_int($fds, [6, 10, 19])) {
        warn dump $fds;
        return 0;
      }
    }
    
    return 1;
  }
}
