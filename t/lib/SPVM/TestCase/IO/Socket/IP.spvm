class TestCase::IO::Socket::IP {
  use IO::Socket;
  use IO::Socket::IP;
  use IO::Socket::UNIX;
  use Go::Sync::WaitGroup;
  use Go;
  use Fn;
  use Sys::Socket::Constant as SOCKET;
  use TestUtil;
  use Sys::OS;
  
  static method ipv4_new : int ($port : int) {
    
    {
      my $host = "127.0.0.1";
      my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port});
      
      unless ($socket is_type IO::Socket::IP) {
        return 0;
      }
      
      unless ($socket->connected) {
        return 0;
      }
      
    }
    
    # Proto
    {
      # IPPROTO_UDP
      {
        my $host = "127.0.0.1";
        my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port, Proto => SOCKET->IPPROTO_UDP});
        
        unless ($socket->protocol == SOCKET->IPPROTO_UDP) {
          return 0;
        }
        
        unless ($socket->socktype == SOCKET->SOCK_DGRAM) {
          return 0;
        }
      }
      
    }
    
    # Options
    {
      # ReuseAddr
      {
        my $host = "127.0.0.1";
        my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port, ReuseAddr => 1});
        
        my $ret = Sys->getsockopt($socket->fileno, SOCKET->SOL_SOCKET, SOCKET->SO_REUSEADDR);
        
        unless ($ret) {
          return 0;
        }
      }
      
      # ReusePort
      if (Sys::OS->is_windows) {
        warn "[Skip Test]Windows do not support SO_REUSEPORT.";
      }
      else {
        my $host = "127.0.0.1";
        my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port, ReusePort => 1});
        
        my $ret = Sys->getsockopt($socket->fileno, SOCKET->SOL_SOCKET, SOCKET->SO_REUSEPORT);
        
        unless ($ret) {
          return 0;
        }
      }
      
      # Broadcast
      {
        my $host = "127.0.0.1";
        my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port, Proto => SOCKET->IPPROTO_UDP, Broadcast => 1});
        
        my $ret = Sys->getsockopt($socket->fileno, SOCKET->SOL_SOCKET, SOCKET->SO_BROADCAST);
        
        unless ($ret) {
          return 0;
        }
      }
    }
    
    return 1;
  }
  
  static method ipv4_peerhost : int ($port : int) {
    
    {
      my $host = "127.0.0.1";
      my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port});
      
      my $peerhost = $socket->peerhost;
      
      unless ($peerhost eq $host) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method ipv4_peerport : int ($port : int) {
    
    {
      my $host = "127.0.0.1";
      my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port});
      
      my $peerport = $socket->peerport;
      
      unless ($peerport == $port) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method ipv4_sockhost : int ($port : int) {
    
    {
      my $host = "127.0.0.1";
      my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port});
      
      my $sockhost = $socket->sockhost;
      
      unless ($sockhost eq $host) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method ipv4_sockport : int ($port : int) {
    
    {
      my $host = "127.0.0.1";
      my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port});
      
      my $sockport = $socket->sockport;
      
      unless ($sockport > 0) {
        return 0;
      }
      
    }
    
    return 1;
  }
  
  static method ipv4_sockaddr : int ($port : int) {
    
    {
      my $addr = "127.0.0.1";
      my $socket = IO::Socket::IP->new({PeerAddr => $addr, PeerPort => $port});
      
      my $sockaddr = $socket->sockaddr;
      
      unless ($sockaddr is_type Sys::Socket::In_addr) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method ipv4_peeraddr : int ($port : int) {
    
    {
      my $addr = "127.0.0.1";
      my $socket = IO::Socket::IP->new({PeerAddr => $addr, PeerPort => $port});
      
      my $peeraddr = $socket->peeraddr;
      
      unless ($peeraddr is_type Sys::Socket::In_addr) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method ipv6_new : int ($port : int) {
    
    {
      my $host = "::1";
      my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port, Domain => SOCKET->AF_INET6});
      
      unless ($socket is_type IO::Socket::IP) {
        return 0;
      }
      
      unless ($socket->connected) {
        return 0;
      }
    }
    
    # Options
    {
      {
        my $host = "::1";
        my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port, Domain => SOCKET->AF_INET6, V6Only => 1});
        
        my $ret = Sys->getsockopt($socket->fileno, SOCKET->IPPROTO_IPV6, SOCKET->IPV6_V6ONLY);
        
        unless ($ret) {
          return 0;
        }
      }
    }
    
    return 1;
  }
  
  static method ipv6_peerhost : int ($port : int) {
    
    {
      my $host = "::1";
      my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port, Domain => SOCKET->AF_INET6});
      
      my $peerhost = $socket->peerhost;
      
      unless ($peerhost eq $host) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method ipv6_peerport : int ($port : int) {
    
    {
      my $host = "::1";
      my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port, Domain => SOCKET->AF_INET6});
      
      my $peerport = $socket->peerport;
      
      unless ($peerport == $port) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method ipv6_sockhost : int ($port : int) {
    
    {
      my $host = "::1";
      my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port, Domain => SOCKET->AF_INET6});
      
      my $sockhost = $socket->sockhost;
      
      unless ($sockhost eq $host) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method ipv6_sockport : int ($port : int) {
    
    {
      my $host = "::1";
      my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port, Domain => SOCKET->AF_INET6});
      
      my $sockport = $socket->sockport;
      
      unless ($sockport > 0) {
        return 0;
      }
      
    }
    
    return 1;
  }
  
  static method ipv6_peeraddr : int ($port : int) {
    
    {
      my $host = "::1";
      my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port, Domain => SOCKET->AF_INET6});
      
      my $peeraddr = $socket->peeraddr;
      
      unless ($peeraddr is_type Sys::Socket::In6_addr) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method ipv6_sockaddr : int ($port : int) {
    
    {
      my $host = "::1";
      my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port, Domain => SOCKET->AF_INET6});
      
      my $sockaddr = $socket->sockaddr;
      
      unless ($sockaddr is_type Sys::Socket::In6_addr) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method accept : int ($port : int) {
    
    my $success_ref = [1];
    
    my $wg = Go::Sync::WaitGroup->new;
    
    $wg->add(2);
    
    # Run a echo server
    my $go_server_ref = [0];
    Go->go([$go_server_ref : int[], $wg : Go::Sync::WaitGroup, $port : int] method : void () {
      
      $go_server_ref->[0] = 1;
      
      TestUtil->run_echo_server_accept_once($port);
      
      $wg->done;
    });
    
    # Tests
    my $go_tests_ref = [0];
    Go->go([$go_tests_ref : int[], $wg : Go::Sync::WaitGroup, $success_ref : int[], $port : int] method : void () {
      
      $go_tests_ref->[0] = 1;
      
      {
        my $host = "127.0.0.1";
        my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port});
        
        my $send_buffer = "abc\n";
        
        $socket->send($send_buffer);
        
        $socket->shutdown(SOCKET->SHUT_WR);
        
        my $string_buffer = StringBuffer->new;
        
        my $recv_buffer = (mutable string)new_string_len 1;
        
        while (1) {
          
          my $recv_length = $socket->recv($recv_buffer);
          
          if ($recv_length > 0) {
            $string_buffer->push($recv_buffer);
          }
          
          if ($recv_buffer eq "\n") {
            last;
          }
        }
        
        unless ($string_buffer->to_string eq "abc\n") {
          $success_ref->[0] = 0;
        }
      }
      
      $wg->done;
    });
    
    Go->gosched;
    
    $wg->wait;
    
    unless ($go_server_ref->[0]) {
      return 0;
    }
    
    unless ($go_tests_ref->[0]) {
      return 0;
    }
    
    return $success_ref->[0];
  }
  
  static method ipv6_extra : int ($port : int) {
    
    # Basic
    {
      my $host = "::1";
      my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port, Domain => SOCKET->AF_INET6});
      
      my $send_buffer = "GET /hello HTTP/1.0\r\nHost: $host\r\n\r\n";
      $socket->send($send_buffer);
      
      $socket->shutdown(SOCKET->SHUT_WR);
      
      my $recv_buffer = (mutable string)new_string_len 1000;
      
      my $recv_length = $socket->recv($recv_buffer);
      
      unless ($recv_length > 0 && $recv_length < 1000) {
        
        warn $recv_length;
        return 0;
      }
      
      Fn->shorten_null_char($recv_buffer);
      
      my $content = $recv_buffer;
      
      unless (Fn->contains($content, "HTTP")) {
        
        warn dump $content;
        return 0;
      }
      
      unless (Fn->contains($content, "hello")) {
        
        warn dump $content;
        return 0;
      }
      
      $socket->close;
    }
    
    # Auto socket close
    {
      my $host = "::1";
      my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port, Domain => SOCKET->AF_INET6});
      
      my $send_buffer = "GET /hello HTTP/1.0\r\nHost: $host\r\n\r\n";
      $socket->send($send_buffer);
      
      $socket->shutdown(SOCKET->SHUT_WR);
      
      my $recv_buffer = (mutable string)new_string_len 1000;
      
      my $recv_length = $socket->recv($recv_buffer);
      
      unless ($recv_length > 0 && $recv_length < 1000) {
        
        warn $recv_length;
        return 0;
      }
      
      Fn->shorten_null_char($recv_buffer);
      
      my $content = $recv_buffer;
      
      unless (Fn->contains($content, "hello")) {
        
        warn dump $content;
        return 0;
      }
    }
    
    return 1;
  }
  
  static method accept_timeout_only_field_value : int ($port : int) {
    
    my $success_ref = [1];
    
    my $wg = Go::Sync::WaitGroup->new;
    
    $wg->add(2);
    
    # Run a echo server
    my $go_server_ref = [0];
    Go->go([$go_server_ref : int[], $wg : Go::Sync::WaitGroup, $success_ref : int[], $port : int] method : void () {
      
      Fn->defer([$wg : Go::Sync::WaitGroup] method : void () {
        $wg->done;
      });
      
      $go_server_ref->[0] = 1;
      
      {
        my $localhost = "127.0.0.1";
        
        my $server_socket = IO::Socket::IP->new({
          LocalAddr => $localhost,
          LocalPort => $port,
          Listen    => 5,
          ReuseAddr => 1,
          Timeout => 1.0,
        });
        
        my $client_socket = (IO::Socket::IP)undef;
        eval { $client_socket = $server_socket->accept; }
        
        if ($@) {
          if (eval_error_id is_error Go::Error::IOTimeout) {
            return;
          }
          else {
            die $@;
          }
        }
        
        unless ($client_socket->timeout == 1.0) {
          $success_ref->[0] = 0;
        }
        
        while (1) {
          
          my $data = (mutable string)new_string_len 1;
          
          my $read_length = $client_socket->read($data);
          
          if ($read_length > 0) {
            $client_socket->write($data);
          }
          else {
            last;
          }
        }
      }
      
    });
    
    # Tests
    my $go_tests_ref = [0];
    Go->go([$go_tests_ref : int[], $wg : Go::Sync::WaitGroup, $success_ref : int[], $port : int] method : void () {
      
      $go_tests_ref->[0] = 1;
      
      {
        my $host = "127.0.0.1";
        my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port});
        
        my $send_buffer = "abc\n";
        
        $socket->send($send_buffer);
        
        $socket->shutdown(SOCKET->SHUT_WR);
        
        my $string_buffer = StringBuffer->new;
        
        my $recv_buffer = (mutable string)new_string_len 1;
        
        while (1) {
          
          my $recv_length = $socket->recv($recv_buffer);
          
          if ($recv_length > 0) {
            $string_buffer->push($recv_buffer);
          }
          
          if ($recv_buffer eq "\n") {
            last;
          }
        }
        
        unless ($string_buffer->to_string eq "abc\n") {
          $success_ref->[0] = 0;
        }
      }
      
      $wg->done;
    });
    
    Go->gosched;
    
    $wg->wait;
    
    unless ($go_server_ref->[0]) {
      return 0;
    }
    
    unless ($go_tests_ref->[0]) {
      return 0;
    }
    
    return $success_ref->[0];
  }
  
}

