# Copyright (c) 2023 Yuki Kimoto
# MIT License

class IO::Handle {
  use IO;
  use Sys;
  use Sys::IO;
  use Sys::IO::Constant as IO;
  use Sys::Ioctl::Constant as IOCTL;
  use Sys::IO::Stat;
  use Fn;
  use Format;
  use Scope::Guard;
  use Hash;
  use Sys::OS;
  
  # Fields
  has FD : protected int;
  
  has AutoFlush : protected byte;
  
  has Blocking : protected byte;
  
  # Class Methods
  static method new : IO::Handle ($options : object[] = undef) {
    my $self = new IO::Handle;
    
    $self->init($options);
    
    return $self;
  }
  
  # Instance Methods
  protected method init : void ($options : object[] = undef) {
    
    Fn->check_option_names($options, $self->option_names);
    
    my $options_h = Hash->new($options);
    
    my $fd = $options_h->get_or_default_int("FD", -1);
    $self->{FD} = $fd;
    
    my $autoflush = $options_h->get_or_default_int("AutoFlush", 0);
    $self->{AutoFlush} = (byte)$autoflush;
    
    my $blocking = $options_h->get_or_default_int("Blocking", 1);
    $self->{Blocking} = (byte)$blocking;
    
    my $fields_init_only = $options_h->get_or_default_int("FieldsInitOnly", 0);
    
    unless ($fields_init_only) {
      $self->configure;
    }
  }
  
  protected method configure : void () {
    
    my $blocking = $self->{Blocking};
    
    unless ($blocking) {
      $self->set_blocking(0);
    }
  }
  
  method option_names : string[] () {
    my $option_names = [
      "FD",
      "AutoFlush",
      "Blocking",
      "FieldsInitOnly",
    ];
    
    return $option_names;
  }
  
  method autoflush : int () {
    return $self->{AutoFlush};
  }
  
  method set_autoflush : void ($autoflush : int) {
    $self->{AutoFlush} = (byte)$autoflush;
  }
  
  method opened : int () {
    my $opened = $self->{FD} >= 0;
    
    return $opened;
  }
  
  method fileno : int () {
    return $self->{FD};
  }
  
  method blocking : int () {
    return $self->{Blocking};
  }
  
  method set_blocking : void ($blocking : int) {
    
    my $current_blocking = $self->{Blocking};
    
    unless (!!$blocking == $current_blocking) {
      
      my $fd = $self->{FD};
      
      if (Sys::OS->is_windows) {
        my $flags = [(int)!$blocking];
        $self->ioctl(IOCTL->FIONBIO, $flags);
      }
      else {
        my $newmode = $self->fcntl(IO->F_GETFL);
        
        if ($blocking == 0) {
          $newmode &= ~IO->O_NDELAY;
          $newmode |= IO->O_NONBLOCK;
        }
        else {
          $newmode &= ~(IO->O_NDELAY|IO->O_NONBLOCK);
        }
        
        $self->fcntl(IO->F_SETFL, $newmode);
      }
    }
    
    $self->{Blocking} = (byte)$blocking;
  }
  
  method close : void () { die "Not implemented."; }
  
  method read : int ($string : mutable string, $length : int = -1, $offset : int = 0) { die "Not implemented."; }
  
  method write : int ($string : string, $length : int = -1, $offset : int = 0) { die "Not implemented."; }
  
  method print : void ($string : string) {
    $self->write($string);
  }
  
  method printf : void ($format : string, $args : object[]) {
    my $formated_string = Format->sprintf($format, $args);
    $self->print($formated_string);
  }
  
  method say : void ($string : string) {
    $self->print($string);
    $self->print("\n");
  }
  
  method stat : Sys::IO::Stat () {
    my $fd = $self->{FD};
    
    my $stat = Sys->fstat($fd);
    
    return $stat;
  }
  
  method fcntl : int ($command : int, $command_arg : object of Int|Sys::IO::Flock|object = undef) {
    my $fd = $self->{FD};
    
    my $fcntl_ret = Sys->fcntl($fd, $command, $command_arg);
    
    return $fcntl_ret;
  }
  
  method ioctl : int ($request : int, $request_arg : object of byte[]|short[]|int[]|long[]|float[]|double[]|object = undef) {
    my $fd = $self->{FD};
    
    my $ioctl_ret =  Sys->ioctl($fd, $request, $request_arg);
    
    return $ioctl_ret;
  }
  
  method sync : void () { die "Not implemented."; }
  
  method truncate : void ($legnth : long) { die "Not implemented."; }
  
}
