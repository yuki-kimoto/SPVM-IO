# Copyright (c) 2024 Yuki Kimoto
# MIT License

class IO::Poll {
  use Sys::Poll;
  use Sys::Poll::PollfdArray;
  use Sys::Poll::Constant as POLL;
  use IO::Poll::Info;
  
  # Fields
  has fd_indexes_h : Hash of Int;
  
  has pollfd_array : PollfdArray;
  
  has disabled_fds_h : Hash of Int;
  
  # Class Methods
  static method new : IO::Poll () {
    
    my $self = IO::Poll->new;
    
    # pollfd_array field
    my $pollfd_array = Sys::Poll::PollfdArray->new;
    $self->{pollfd_array} = $pollfd_array;
    
    # fd_indexes_h field
    my $fd_indexes_h = Hash->new;
    $self->{fd_indexes_h} = $fd_indexes_h;
    
    my $disabled_fds_h = Hash->new;
    $self->{disabled_fds_h} = $disabled_fds_h;
    
    return $self;
  }
  
  # Instance Methods
  method fds : int[] () {
    
    my $fd_indexes_h = $self->{fd_indexes_h};
    
    my $fds = $fd_indexs_h->keys;
    
    return $fds;
  }
  
  method mask : int ($fd : int) {
    
    unless ($fd >= 0) {
      die "The file descriptor \$fd must be greater than or equal to 0.";
    }
    
    my $fd_indexes_h = $self->{fd_indexes_h};
    
    my $fd_index_object = $fd_indexes_h->get($fd);
    
    my $event_mask = 0;
    
    if ($fd_index_object) {
      my $fd_index = (int)$fd_index_object;
      
      my $pollfd_array = $self->{pollfd_array};
      
      $event_mask = $pollfd_array->events($fd_index);
    }
    
    return $event_mask;
  }
  
  method set_mask : void ($fd : int, $event_mask : int) {
    
    unless ($fd >= 0) {
      die "The file descriptor \$fd must be greater than or equal to 0.";
    }
    
    my $fd_indexes_h = $self->{fd_indexes_h};
    
    my $fd_index_object = $fd_indexes_h->get($fd);
    
    my $pollfd_array = $self->{pollfd_array};
    
    my $fd_index = -1;
    if ($fd_index_object) {
      $fd_index = (int)$fd_index_object;
    }
    else {
      my $disabled_fds = $self->{disabled_fds};
      
      if ($disabled_fds->length > 0) {
        $fd_index = (int)$disabled_fds->pop;
      }
      else {
        $pollfd_array->push($fd);
        $fd_index = $pollfd_array->length - 1;
      }
      
      $fd_indexes_h->set($fd, $fd_index);
    }
    
    $pollfd_array->set_events($fd_index, $event_mask);
  }
  
  method remove : void ($fd : int) {
    
    unless ($fd >= 0) {
      die "The file descriptor \$fd must be greater than or equal to 0.";
    }
    
    my $fd_indexes_h = $self->{fd_indexes_h};
    
    my $fd_index_object = $fd_indexes_h->delete($fd);
    
    if ($fd_index_object) {
      my $fd_index = $fd_index_object->value;
      
      my $pollfd_array = $self->{pollfd_array};
      
      $pollfd_array->set_fd($fd_index, -1);
      
      my $disabled_fds_h = $self->{disabled_fds_h};
      
      $disabled_fds->set($fd => 1);
    }
  }
  
  method poll : int ($timeout : double = -1) {
    
    my $pollfd_array = $self->{pollfd_array};
    
    my $nfds = $pollfd_array->length;
    
    my $timeout_ms = $timeout * 1000;
    
    my $ready_count = Sys::Poll->poll($pollfd_array, $nfds, (int)$timeout_ms);
    
    return $ready_count;
  }
  
  method events : int ($fd : int) {
    
    my $fd_indexes_h = $self->{fd_indexes_h};
    
    my $fd_index_object = $fd_indexes_h->get($fd);
    
    my $revents = 0;
    
    if ($fd_index_object) {
      my $fd_index = (int)$fd_index_object;
      
      my $pollfd_array = $self->{pollfd_array};
      
      my $fd = $pollfd_array->fd($fd_index);
      
      if ($fd >= 0) {
        $revents = $pollfd_array->revents($fd_index);
      }
    }
    
    return $revents;
  }
  
}
