# Copyright (c) 2023 Yuki Kimoto
# MIT License

class IO::File extends IO::Handle {
  use Sys::IO;
  use Fn;
  use Array;
  use Sys::IO::FileStream;
  use StringBuffer;
  
  # Fields
  has stream : private Sys::IO::FileStream;
  
  # Class methods
  
  static method new : IO::File ($file_name : string = undef, $open_mode : object of string|Int = undef, $perm : int = 0) {
    my $self = new IO::File;
    
    $self->init;
    
    if ($file_name) {
      $self->open($file_name, $open_mode, $perm);
    }
    
    return $self;
  }
  
  static method new_from_fd : IO::Handle ($fd : int, $open_mode : string = undef) {
    my $self = new IO::File;
    
    $self->init;
    
    $self->fdopen($fd, $open_mode);
    
    return $self;
  }
  
  method input_line_number : long () {
    return $self->{input_line_number};
  }
  
  method set_input_line_number : void ($input_line_number : long) {
    $self->{input_line_number} = $input_line_number ;
  }
  
  method open : int ($file_name : string, $open_mode : object of string|Int, $perm : int = 0) {
    
    my $stream_ref = [(Sys::IO::FileStream)undef];
    
    unless ($open_mode) {
      die "\$open_mode must be defined.";
    }
    
    my $success = -1;
    my $stream = [(Sys::IO::FileStream)undef];
    if ($open_mode is_type string) {
      $success = Sys->open($stream_ref, (string)$open_mode, $file_name);
    }
    elsif ($open_mode is_type Int) {
      my $fd = -1;
      $success = Sys->sysopen(\$fd, $file_name, $open_mode->(Int)->value, $perm);
      $success = Sys->fdopen($stream, $open_mode->(Int)->value, $fd);
    }
    else {
      die "The type of \$open_mode must be string or Int.";
    }
    
    $self->{stream} = $stream_ref->[0];
    
    return $success;
  }
  
  method fdopen : int ($fd : int, $open_mode : string) {
    
    my $stream_ref = [(Sys::IO::FileStream)undef];
    
    my $success = Sys->fdopen($stream_ref, $open_mode, $fd);
    
    $self->{stream} = $stream_ref->[0];
    
    return $success;
  }
  
  protected method init : void ($options : object[] = undef) {
    $self->SUPER::init;
  }
  
  method DESTROY : void () {
    if ($self->{stream}) {
      $self->flush;
    }
  }
  
  # Instance methods
  method getline : string () {
    my $stream = $self->{stream};
    my $line = Sys::IO->readline($stream);
    
    $self->{input_line_number}++;
    
    return $line;
  }
  
  method getlines : string () {
    
    my $buffer_length = 4096;
    my $buffer = (mutable string)new_string_len $buffer_length;
    my $string_buffer = StringBuffer->new;
    while (1) {
      my $read_length = $self->read($buffer, length $buffer);
      
      if ($read_length < $buffer_length) {
        $string_buffer->push(Fn->substr($buffer, 0, $read_length));
        last;
      }
      else {
        $string_buffer->push($buffer);
      }
    }
    
    my $string = $string_buffer->to_string;
    
    return $string;
  }
  
  method close : int () {
    my $stream = $self->{stream};
    
    my $status = Sys::IO->fclose($stream);
    
    $self->{stream} = undef;
    
    my $success = $status == 0;
    
    return $success;
  }
  
  method eof : int () {
    my $stream = $self->{stream};
    return Sys::IO->feof($stream);
  }
  
  method fileno : int () {
    my $stream = $self->{stream};
    my $fd = Sys->fileno($stream);
    return $fd;
  }
  
  method getc : int () {
    my $stream = $self->{stream};
    my $success = Sys->getc($stream);
    return $success;
  }
  
  method print : int ($string : string) {
    
    my $stream = $self->{stream};
    
    my $success = Sys->print($stream, $string);
    
    return $success;
  }
  
  method clearerr : void () {
    
    my $stream = $self->{stream};
    
    Sys::IO->clearerr($stream);
  }
  
  method error : int () {
    my $stream = $self->{stream};
    
    my $error = Sys::IO->ferror($stream);
    
    return $error;
  }
  
  method flush : int () {
    my $stream = $self->{stream};
    
    my $status = Sys::IO->fflush($stream);
    
    my $success = $status == 0;
    
    return $success;
  }
  
  method ungetc : int ($c : int) {
    my $stream = $self->{stream};
    
    my $c_pushed = Sys::IO->ungetc($c, $stream);
    
    return $c_pushed;
  }
  
  method write : int ($string : string, $length : int = -1, $offset : int = 0) {
    
    my $write_string = Fn->substr($string, $offset, $length);
    
    my $stream = $self->{stream};
    
    my $success = Sys->print($stream, $write_string);
    
    return $success;
  }
  
  method read : int ($string : mutable string, $length : int = -1, $offset : int = 0) {
    
    my $stream = $self->{stream};
    
    my $read_length = Sys->read($stream, $string, $length, $offset);
    
    return $read_length;
  }
  
}
