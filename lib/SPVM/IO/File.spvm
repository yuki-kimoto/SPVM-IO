class IO::File extends IO::Handle : precompile {
  use IO::FileHandle;
  use Fn;
  use Array;
  
  # INIT block
  INIT {
    &init_constant_values();
  }
  
  # Class variables
  our $STDIN : ro int;
  our $STDOUT : ro int;
  our $STDERR : ro int;
  
  # Fields
  has auto_flush : rw byte;
  has fh : private IO::FileHandle;
  
  # Class methods
  native static method open : IO::File ($file_name : string, $open_mode : string);
  private native static method init_constant_values : void ();
  
  # Instance methods
  native method flush : void ();
  native method print : void ($string : string);
  native method read : int ($bufer : mutable string);
  native method readline : string ();
  
  method slurp : string ($file : string) {
    
    my $buffer_length = 4096;
    my $buffer = (mutable string)new_string_len $buffer_length;
    my $string = "";
    while (1) {
      my $read_length = $self->read($buffer);
      
      if ($read_length < $buffer_length) {
        $string .= Fn->substr($buffer, 0, $read_length);
        last;
      }
      else {
        $string .= (string)$buffer;
      }
    }
    return $string;
  }
}
