# Copyright (c) 2023 Yuki Kimoto
# MIT License

class IO::File extends IO::Handle {
  use Sys::IO;
  use Fn;
  use Array;
  use Sys::IO::FileStream;
  use StringBuffer;
  
  # Fields
  has stream : private Sys::IO::FileStream;
  
  # Class methods

  static method new : IO::File ($file_name : string = undef, $open_mode : string = undef) {
    my $self = new IO::File;
    
    $self->init;
    
    if ($file_name) {
      $self->open($file_name, $open_mode);
    }
    
    return $self;
  }

  static method new_from_fd : IO::Handle ($fd : int, $open_mode : string = undef) {
    my $self = new IO::File;
    
    $self->init;
    
    $self->fdopen($fd, $open_mode);
    
    return $self;
  }

  method open : void ($file_name : string, $open_mode : string) {
    
    my $valid_mode = 0;
    my $real_mode : string;
    if ($open_mode eq "<") {
      $valid_mode = 1;
      $real_mode = "rb";
    }
    elsif ($open_mode eq ">") {
      $valid_mode = 1;
      $real_mode = "wb";
    }
    elsif ($open_mode eq ">>") {
      $valid_mode = 1;
      $real_mode = "wa";
    }
    elsif ($open_mode eq "+<") {
      $valid_mode = 1;
      $real_mode = "r+b";
    }
    elsif ($open_mode eq "+>") {
      $valid_mode = 1;
      $real_mode = "w+b";
    }
    elsif ($open_mode eq "+>>") {
      $valid_mode = 1;
      $real_mode = "a+b";
    }
    else {
      $valid_mode = 0;
    }
    unless ($valid_mode) {
      die "Invalid open mode $open_mode";
    }
    
    my $stream = Sys::IO->fopen($file_name, $real_mode);
    
    $self->{stream} = $stream;
  }

  method fdopen : void ($fd : int, $open_mode : string) {
    
    my $valid_mode = 0;
    my $real_mode : string;
    if ($open_mode eq "<") {
      $valid_mode = 1;
      $real_mode = "rb";
    }
    elsif ($open_mode eq ">") {
      $valid_mode = 1;
      $real_mode = "wb";
    }
    elsif ($open_mode eq ">>") {
      $valid_mode = 1;
      $real_mode = "wa";
    }
    elsif ($open_mode eq "+<") {
      $valid_mode = 1;
      $real_mode = "r+b";
    }
    elsif ($open_mode eq "+>") {
      $valid_mode = 1;
      $real_mode = "w+b";
    }
    elsif ($open_mode eq "+>>") {
      $valid_mode = 1;
      $real_mode = "a+b";
    }
    else {
      $valid_mode = 0;
    }
    unless ($valid_mode) {
      die "Invalid open mode $open_mode";
    }
    
    my $stream = Sys::IO->fdopen($fd, $real_mode);
    
    $self->{stream} = $stream;
  }

  protected method init : void ($options : object[] = undef) {
    $self->SUPER::init;
  }
  
  method DESTROY : void () {
    if ($self->{stream}) {
      $self->flush;
    }
  }
  
  # Instance methods
  method getline : string () {
    my $stream = $self->{stream};
    my $line = Sys::IO->readline($stream);
    return $line;
  }
  
  method getlines : string () {
    
    my $buffer_length = 4096;
    my $buffer = (mutable string)new_string_len $buffer_length;
    my $string_buffer = StringBuffer->new;
    while (1) {
      my $read_length = $self->read($buffer, length $buffer);
      
      if ($read_length < $buffer_length) {
        $string_buffer->push(Fn->substr($buffer, 0, $read_length));
        last;
      }
      else {
        $string_buffer->push($buffer);
      }
    }
    
    my $string = $string_buffer->to_string;
    
    return $string;
  }
  
  method close : int () {
    my $stream = $self->{stream};
    
    my $status = Sys::IO->fclose($stream);
    
    $self->{stream} = undef;
    
    return $status;
  }
  
  method eof : int () {
    my $stream = $self->{stream};
    return Sys::IO->feof($stream);
  }
  
  method fileno : int () {
    my $stream = $self->{stream};
    return Sys::IO->fileno($stream);
  }
  
  method getc : int () {
    my $stream = $self->{stream};
    return Sys::IO->getc($stream);
  }
  
  method print : int ($string : string) {
    
    my $stream = $self->{stream};
    
    my $length = length $string;
    
    return Sys::IO->fwrite($string, 1, $length, $stream);
  }
  
  method clearerr : void () {
    
    my $stream = $self->{stream};
    
    Sys::IO->clearerr($stream);
  }
  
  method error : int () {
    my $stream = $self->{stream};
    
    return Sys::IO->ferror($stream);
  }
  
  method flush : int () {
    my $stream = $self->{stream};
    
    return Sys::IO->fflush($stream);
  }
  
  method ungetc : int ($c : int) {
    my $stream = $self->{stream};
    
    return Sys::IO->ungetc($c, $stream);
  }
  
  method write : int ($string : string, $length : int = -1, $offset : int = 0) {
    
    unless ($string) {
      die "The \$string must be defined.";
    }
    
    unless ($offset >= 0) {
      die "The \$offset must be greater than or equal to 0.";
    }
    
    my $string_length = length $string;
    
    if ($length < 0) {
      $length = $string_length - $offset;
    }
    
    unless ($offset + $length <= $string_length) {
      die "The \$offset + \$length must be lower than or equal to the length of the \$string.";
    }
    
    my $stream = $self->{stream};
    
    return Sys::IO->fwrite($string, 1, $length, $stream);
  }
  
  method read : int ($string : mutable string, $length : int = -1, $offset : int = 0) {
    
    unless ($string) {
      die "The \$string must be defined.";
    }
    
    unless ($offset >= 0) {
      die "The \$offset must be greater than or equal to 0.";
    }
    
    my $string_length = length $string;
    
    if ($length < 0) {
      $length = $string_length - $offset;
    }
    
    unless ($offset + $length <= $string_length) {
      die "The \$offset + \$length must be lower than or equal to the length of the \$string.";
    }
    
    my $stream = $self->{stream};
    
    return Sys::IO->fread($string, 1, $length, $stream);
  }
}
