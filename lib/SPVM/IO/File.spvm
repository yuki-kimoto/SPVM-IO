class IO::File extends IO::Handle : precompile {
  use Sys::IO;
  use Fn;
  use Array;
  use Sys::IO::FileStream;
  use Sys::Ioctl;
  use Sys::Stat;
  
  # Fields
  has auto_flush : rw byte;
  has stream : private Sys::IO::FileStream;
  
  # Class methods
  native static method STDERR : int ();
  native static method STDIN : int ();
  native static method STDOUT : int ();
  native static method open : IO::File ($file_name : string, $open_mode : string);
  
  static method new : IO::File () {
    my $self = new IO::File;
    
    $self->init;
    
    return $self;
  }
  
  method init : void () {
    $self->SUPER::init;
  }
  
  method DESTROY : void () {
    $self->flush;
  }
  
  # Instance methods
  native method read : int ($bufer : mutable string);
  native method readline : string ();
  
  method slurp : string ($file : string) {
    
    my $buffer_length = 4096;
    my $buffer = (mutable string)new_string_len $buffer_length;
    my $string = "";
    while (1) {
      my $read_length = $self->read($buffer);
      
      if ($read_length < $buffer_length) {
        $string .= Fn->substr($buffer, 0, $read_length);
        last;
      }
      else {
        $string .= (string)$buffer;
      }
    }
    return $string;
  }
  
  method close : int () {
    my $stream = $self->{stream};
    
    my $status = Sys::IO->fclose($stream);
    
    return $status;
  }
  
  method eof : int () {
    my $stream = $self->{stream};
    return Sys::IO->feof($stream);
  }
  
  method fileno : int () {
    my $stream = $self->{stream};
    return Sys::IO->fileno($stream);
  }
  
  method getc : int () {
    my $stream = $self->{stream};
    return Sys::IO->getc($stream);
  }
  
  method print : int ($string : string) {
    
    my $stream = $self->{stream};
    
    my $length = length $string;
    
    return Sys::IO->fwrite($string, 1, $length, $stream);
  }
  
  method clearerr : void () {
    
    my $stream = $self->{stream};
    
    Sys::IO->clearerr($stream);
  }
  
  method error : int () {
    my $stream = $self->{stream};
    
    return Sys::IO->ferror($stream);
  }
  
  method flush : int () {
    my $stream = $self->{stream};
    
    return Sys::IO->fflush($stream);
  }
  
  method ungetc : int ($c : int) {
    my $stream = $self->{stream};
    
    return IO::File->native_ungetc($c, $stream);
  }

  native static method ftruncate : int ($fd : int, $length : long);

  native static method native_ungetc : int ($c : int, $stream : Sys::IO::FileStream);

  native static method fsync : int ($fd : int);

  native static method fstat : int ($fd : int, $stat : Sys::Stat);
}
