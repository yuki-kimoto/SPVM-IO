# Copyright (c) 2023 Yuki Kimoto
# MIT License

class IO::Select {
  use IntList;
  use Math;
  use Sys::Time::Timeval;
  use Sys::Select;
  use Sys;
  use Sys::Select::Constant as SELECT;
  
  # Fields
  has fds_list : IntList;
  
  # Class Methods
  static method new : IO::Select () {
    
    my $self = new IO::Select;
    
    $self->{fds_list} = IntList->new;
    
    return $self;
  }
  
  method add : void ($fd : int) {
    
    my $found = 0;
    my $fds_list = $self->{fds_list};
    
    for (my $i = 0; $i < $fds_list->length; $i++) {
      my $self_fd = $fds_list->get($i);
      
      if ((int)$self_fd == $fd) {
        $found = 1;
        last;
      }
    }
    
    unless ($found) {
      $fds_list->push($fd);
    }
  }
  
  method remove : void ($fd : int) {
    
    my $fds_list = $self->{fds_list};
    
    my $removed = 0;
    for (my $i = 0; $i < $fds_list->length; $i++) {
      my $self_fd = $fds_list->get($i);
      
      if ((int)$self_fd == $fd) {
        $fds_list->remove($i);
        last;
      }
    }
  }
  
  method exists : int ($fd : int) {
    
    my $fds_list = $self->{fds_list};
    
    for (my $i = 0; $i < $fds_list->length; $i++) {
      my $self_fd = $fds_list->get($i);
      
      if ((int)$self_fd == $fd) {
        return 1;
      }
    }
    
    return 0;
  }
  
  method fds : int[] () {
    
    return $self->{fds_list}->to_array;
  }
  
  method count : int () {
    
    return $self->{fds_list}->length;
  }
  
  method can_read : int[] ($timeout : double = -1) {
    my $fds_list = $self->{fds_list};
    my $fds = $fds_list->to_array;
    
    my $timeout_int = 0.0;
    my $timeout_fraction = Math->modf($timeout, \$timeout_int);
    
    my $tv = (Sys::Time::Timeval)undef;
    
    if ($timeout >= 0) {
      $tv = Sys::Time::Timeval->new;
      $tv->set_tv_sec((int)$timeout_int);
      $tv->set_tv_usec((int)($timeout_fraction * 1000000));
    }
    
    # Set fds to fd_set
    my $fd_set = Sys::Select::Fd_set->new;
    Sys::Select->FD_ZERO($fd_set);
    
    for (my $i = 0; $i < @$fds; $i++) {
      my $fd = $fds->[$i];
      Sys::Select->FD_SET($fd, $fd_set);
    }
    
    # select
    my $success_count = Sys::Select->select(SELECT->FD_SETSIZE, $fd_set, undef, undef, $tv);
    
    # Can fds
    my $can_fds = new int[$success_count];
    
    my $can_fds_index = 0;
    for (my $i = 0; $i < @$fds; $i++) {
      my $fd = $fds->[$i];
      
      if (Sys::Select->FD_ISSET($fd, $fd_set)) {
        $can_fds->[$can_fds_index++] = $fd;
      }
    }
    
    return $can_fds;
  }
  
  method can_write : int[] ($timeout : double = -1) {
    my $fds_list = $self->{fds_list};
    my $fds = $fds_list->to_array;
    
    my $timeout_int = 0.0;
    my $timeout_fraction = Math->modf($timeout, \$timeout_int);
    
    my $tv = (Sys::Time::Timeval)undef;
    
    if ($timeout >= 0) {
      $tv = Sys::Time::Timeval->new;
      $tv->set_tv_sec((int)$timeout_int);
      $tv->set_tv_usec((int)($timeout_fraction * 1000000));
    }
    
    # Set fds to fd_set
    my $fd_set = Sys::Select::Fd_set->new;
    Sys::Select->FD_ZERO($fd_set);
    
    for (my $i = 0; $i < @$fds; $i++) {
      my $fd = $fds->[$i];
      Sys::Select->FD_SET($fd, $fd_set);
    }
    
    # select
    my $success_count = Sys::Select->select(SELECT->FD_SETSIZE, undef, $fd_set, undef, $tv);
    
    # Can fds
    my $can_fds = new int[$success_count];
    
    my $can_fds_index = 0;
    for (my $i = 0; $i < @$fds; $i++) {
      my $fd = $fds->[$i];
      
      if (Sys::Select->FD_ISSET($fd, $fd_set)) {
        $can_fds->[$can_fds_index++] = $fd;
      }
    }
    
    return $can_fds;
  }
  
  method has_exception : int[] ($timeout : double = -1) {
    my $fds_list = $self->{fds_list};
    my $fds = $fds_list->to_array;
    
    my $timeout_int = 0.0;
    my $timeout_fraction = Math->modf($timeout, \$timeout_int);
    
    my $tv = (Sys::Time::Timeval)undef;
    
    if ($timeout >= 0) {
      $tv = Sys::Time::Timeval->new;
      $tv->set_tv_sec((int)$timeout_int);
      $tv->set_tv_usec((int)($timeout_fraction * 1000000));
    }
    
    # Set fds to fd_set
    my $fd_set = Sys::Select::Fd_set->new;
    Sys::Select->FD_ZERO($fd_set);
    
    for (my $i = 0; $i < @$fds; $i++) {
      my $fd = $fds->[$i];
      Sys::Select->FD_SET($fd, $fd_set);
    }
    
    # select
    my $success_count = Sys::Select->select(SELECT->FD_SETSIZE, undef, undef, $fd_set, $tv);
    
    # Can fds
    my $can_fds = new int[$success_count];
    
    my $can_fds_index = 0;
    for (my $i = 0; $i < @$fds; $i++) {
      my $fd = $fds->[$i];
      
      if (Sys::Select->FD_ISSET($fd, $fd_set)) {
        $can_fds->[$can_fds_index++] = $fd;
      }
    }
    
    return $can_fds;
  }
  
}
