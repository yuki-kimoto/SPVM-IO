# Copyright (c) 2023 Yuki Kimoto
# MIT License

class IO::Select {
  use IntList;
  use Math;
  use Sys::Time::Timeval;
  use Sys::Select;
  use Sys;
  
  has handles : IntList;
  
  static method new : IO::Select () {
    my $self = new IO::Select;
    
    $self->{handles} = IntList->new((int[])undef);
    
    return $self;
  }

  method add : int ($new_handle : int) {
    
    my $found = 0;
    my $handles = $self->{handles};
    
    for (my $i = 0; $i < $handles->length; $i++) {
      my $handle = $handles->get($i);
      
      if ((int)$handle == $new_handle) {
        $found = 1;
        last;
      }
    }
    
    if ($found) {
      return 0;
    }
    else {
      $handles->push($new_handle);
      return 1;
    }
  }

  method remove : int ($remove_handle : int) {
    
    my $new_handles = IntList->new((int[])undef);
    my $handles = $self->{handles};
    
    my $removed = 0;
    for (my $i = 0; $i < $handles->length; $i++) {
      my $handle = $handles->get($i);
      
      if ((int)$handle == $remove_handle) {
        $removed = 1;
      }
      else {
        $new_handles->push($handle);
      }
    }
    
    $self->{handles} = $new_handles;
    
    return $removed;
  }
  
  method exists : int ($check_handle : int) {
    
    my $handles = $self->{handles};
    
    for (my $i = 0; $i < $handles->length; $i++) {
      my $handle = $handles->get($i);
      
      if ((int)$handle == $check_handle) {
        return 1;
      }
    }
    
    return 0;
  }

  method handles : int[] () {
    return $self->{handles}->to_array;
  }

  method can_read : int[] ($timeout : double) {
    my $handles_list = $self->{handles};
    my $handles = $handles_list->to_array;
    
    my $timeout_int = 0.0;
    my $timeout_fraction = Math->modf($timeout, \$timeout_int);
    
    my $tv = Sys::Time::Timeval->new;
    $tv->set_tv_sec((int)$timeout_int);
    $tv->set_tv_usec((int)($timeout_fraction * 1000000));
    
    # Set handles to fd_set
    my $fds = Sys::Select::Fd_set->new;
    Sys::Select->FD_ZERO($fds);
    
    for (my $i = 0; $i < @$handles; $i++) {
      my $handle = $handles->[$i];
      Sys::Select->FD_SET($handle, $fds);
    }
    
    # select
    my $success_count = &select($fds, undef, undef, $tv);
    
    # Can handles
    my $can_handles = new int[$success_count];
    
    my $can_handles_index = 0;
    for (my $i = 0; $i < @$handles; $i++) {
      my $handle = $handles->[$i];
      
      if (Sys::Select->FD_ISSET($handle, $fds)) {
        $can_handles->[$can_handles_index++] = $handle;
      }
    }
    
    return $can_handles;
  }
 
  method can_write : int[] ($timeout : double) {
    my $handles_list = $self->{handles};
    my $handles = $handles_list->to_array;
    
    my $timeout_int = 0.0;
    my $timeout_fraction = Math->modf($timeout, \$timeout_int);
    
    my $tv = Sys::Time::Timeval->new;
    $tv->set_tv_sec((int)$timeout_int);
    $tv->set_tv_usec((int)($timeout_fraction * 1000000));
    
    # Set handles to fd_set
    my $fds = Sys::Select::Fd_set->new;
    Sys::Select->FD_ZERO($fds);
    
    for (my $i = 0; $i < @$handles; $i++) {
      my $handle = $handles->[$i];
      Sys::Select->FD_SET($handle, $fds);
    }
    
    # select
    my $success_count = &select(undef, $fds, undef, $tv);
    
    # Can handles
    my $can_handles = new int[$success_count];
    
    my $can_handles_index = 0;
    for (my $i = 0; $i < @$handles; $i++) {
      my $handle = $handles->[$i];
      
      if (Sys::Select->FD_ISSET($handle, $fds)) {
        $can_handles->[$can_handles_index++] = $handle;
      }
    }
    
    return $can_handles;
  }

  method has_exception : int[] ($timeout : double) {
    my $handles_list = $self->{handles};
    my $handles = $handles_list->to_array;
    
    my $timeout_int = 0.0;
    my $timeout_fraction = Math->modf($timeout, \$timeout_int);
    
    my $tv = Sys::Time::Timeval->new;
    $tv->set_tv_sec((int)$timeout_int);
    $tv->set_tv_usec((int)($timeout_fraction * 1000000));
    
    # Set handles to fd_set
    my $fds = Sys::Select::Fd_set->new;
    Sys::Select->FD_ZERO($fds);
    
    for (my $i = 0; $i < @$handles; $i++) {
      my $handle = $handles->[$i];
      Sys::Select->FD_SET($handle, $fds);
    }
    
    # select
    my $success_count = &select(undef, undef, $fds, $tv);
    
    # Can handles
    my $can_handles = new int[$success_count];
    
    my $can_handles_index = 0;
    for (my $i = 0; $i < @$handles; $i++) {
      my $handle = $handles->[$i];
      
      if (Sys::Select->FD_ISSET($handle, $fds)) {
        $can_handles->[$can_handles_index++] = $handle;
      }
    }
    
    return $can_handles;
  }
  
  static method select : int ($readfds : Sys::Select::Fd_set, $writefds : Sys::Select::Fd_set, $exceptfds : Sys::Select::Fd_set, $timeout : Sys::Time::Timeval) {
    my $nfds = 1024;
    my $fd_number = Sys::Select->select($nfds, $readfds, $writefds, $exceptfds, $timeout);
    return $fd_number;
  }
}
