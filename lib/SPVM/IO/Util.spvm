class IO::Util {
  use Hash;
  use List;
  use Sys::Socket::Sockaddr;
  
  static method hash_to_array : object[] ($hash : Hash) {
    my $keys = $hash->keys;
    
    my $keys_length = @$keys;
    my $key_values_list = List->new;
    
    for my $key (@$keys) {
      my $value = $hash->get($key);
      $key_values_list->push($key);
      $key_values_list->push($value);
    }
    
    my $key_values = $key_values_list->to_array;
    
    return $key_values;
  }

  static method delete_int_or_default : int ($hash : Hash, $key : string, $default : int) {
    
    unless ($hash) {
      die "The \$hash must be defined";
    }
    
    unless ($key) {
      die "The \$key must be defined";
    }
    
    my $value = 0;
    if ($hash->exists($key)) {
      $value = $hash->get_int($key);
      $hash->delete($key);
    }
    else {
      $value = $default;
    }
    
    return $value;
  }

  static method delete_string_or_default : string ($hash : Hash, $key : string, $default : string) {
    
    unless ($hash) {
      die "The \$hash must be defined";
    }
    
    unless ($key) {
      die "The \$key must be defined";
    }
    
    my $value = (string)undef;
    if ($hash->exists($key)) {
      $value = $hash->get_string($key);
      $hash->delete($key);
    }
    else {
      $value = $default;
    }
    
    return $value;
  }

  static method delete_or_default : object ($hash : Hash, $key : string, $default : object) {
    
    unless ($hash) {
      die "The \$hash must be defined";
    }
    
    unless ($key) {
      die "The \$key must be defined";
    }
    
    my $value = 0;
    if ($hash->exists($key)) {
      $value = $hash->get($key);
      $hash->delete($key);
    }
    else {
      $value = $default;
    }
    
    return $value;
  }

  native static method sockatmark : int ($sockfd : int);

  native static method sendto : int ($sockfd : int, $buf : string, $len : int, $flags : int, $addr : Sys::Socket::Sockaddr, $addrlen : int);

  native static method SO_BROADCAST : int ();
  native static method IPPROTO_ICMP : int ();
}
