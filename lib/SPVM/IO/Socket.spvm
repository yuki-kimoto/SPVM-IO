# Copyright (c) 2023 Yuki Kimoto
# MIT License

class IO::Socket extends IO::Handle {
  use Sys::Socket;
  use Sys::Socket::Constant as SOCKET;
  use Sys::Socket::Sockaddr;
  use Sys::Socket::Sockaddr::In;
  use Sys::Socket::Sockaddr::In6;
  use Sys::Socket::Sockaddr::Un;
  use Sys::Socket::In_addr;
  use Hash;
  use Errno;
  use Go;
  use Sys::Socket::Errno;
  
  # Fields
  
  has Domain : protected int;
  has Type : protected int;
  has Proto : protected int;
  has Blocking : protected int;
  has Listen : protected int;
  has Timeout : protected int;
  has peername : protected Sys::Socket::Sockaddr;
  
  # Class Methods
  static method new : IO::Socket ($options : object[] = undef) {
    
    my $self = new IO::Socket;
    
    $self->init($options);
    
    return $self;
  }
  
  # Instance Methods
  method init : void ($options : object[] = undef) {
    
    $self->check_option_names($options, $self->option_names);
    
    $self->SUPER::init();
    
    $self->set_autoflush(1);
    
    my $options_h = Hash->new($options);
    
    my $timeout = $options_h->delete_or_default_int("Timeout", -1);
    $self->{Timeout} = $timeout;
    
    $self->configure($options_h->to_array);
    
    $self->set_blocking(0);
  }
  
  method new_from_instance : IO::Socket ($options : object[] = undef) {
    my $io_socket = IO::Socket->new($options);
    
    return $io_socket;
  }
  
  method option_names : string[] () {
    my $option_names = [
      "Domain",
      "Type",
      "Proto",
      "Blocking",
      "Listen",
      "Timeout",
    ];
    
    return $option_names;
  }
  
  method check_option_names : void ($options : object[], $available_option_names : string[]) {
    
    my $available_option_names_h = Hash->new;
    for my $available_option_name (@$available_option_names) {
     $available_option_names_h->set_int($available_option_name, 1);
    }
    
    for (my $i = 0; $i < @$options; $i += 2) {
      my $option_name = (string)$options->[$i];
      
      unless ($available_option_names_h->get($option_name)) {
        die "The \"$option_name\" option is not available.";
      }
    }
  }
  
  method DESTROY : void () {
    $self->{peername} = undef;
    $self->close;
  }
  
  protected method configure : void ($options : object[] = undef) { die "Not implemented."; }
  
  method socket : void ($domain : int, $type : int, $protocol : int = 0) {
    
    my $fd = -1;
    
    Sys->socket(\$fd, $domain, $type, $protocol);
    
    $self->{fd} = $fd;
    $self->{Domain} = $domain;
    $self->{Type} = $type;
    $self->{Proto} = $protocol;
  }
  
  method socketpair : IO::Socket[] ($domain : int, $type : int, $protocol : int) {
    my $sock1 = IO::Socket->new;
    my $sock2 = IO::Socket->new;
    
    my $sock1_fd = $sock1->{fd};
    my $sock2_fd = $sock2->{fd};
    
    Sys->socketpair(\$sock1_fd, \$sock2_fd, $domain, $type, $protocol);
    
    $sock1->{fd} = $sock1_fd;
    $sock1->{Type} = $type;
    $sock1->{Proto} = $protocol;
    
    $sock2->{fd} = $sock2_fd;
    
    my $pair = [$sock1, $sock2];
    
    return $pair;
  }
  
  method connect : int ($sockaddr : Sys::Socket::Sockaddr) {
    
    my $timeout = $self->{Timeout};
    
    my $timeout_ref = (double[])undef;
    
    if ($timeout > 0) {
      $timeout_ref = [(double)$timeout];
    }
    
    my $fd = $self->{fd};
    
    my $connect_success = 0;
    eval { $connect_success = Sys->connect($fd, $sockaddr); }
    
    if ($@) {
      my $again = 
        Sys::Socket->socket_errno == Sys::Socket::Errno->EWOULDBLOCK
        || Sys::Socket->socket_errno == Sys::Socket::Errno->EINPROGRESS
        || Sys::Socket->socket_errno == Errno->EINTR
      ;
      
      if ($again) {
        Go->gosched_io_write($fd, $timeout_ref);
        if ($timeout_ref->[0] < 0) {
          die "The accept method timed out.";
        }
      }
      else {
        die $@;
      }
    }
    
    $self->{peername} = $sockaddr;
    
    return $connect_success;
  }
  
  # method blocking - this is implemented in the super class.
  
  method close : int () {
    my $fd = $self->{fd};
    
    my $status = 0;
    
    if ($fd >= 0) {
      $status = Sys::Socket->close($fd);
      $self->{fd} = -1;
      $self->{peername} = undef;
    }
    
    return $status;
  }
  
  method bind : int ($sockaddr : Sys::Socket::Sockaddr) {
    my $fd = $self->{fd};
    my $success = Sys->bind($fd, $sockaddr);
    
    return $success;
  }
  
  method listen : int ($queue : int = 5) {
    my $fd = $self->{fd};
    my $success = Sys->listen($fd, $queue);
    return $success;
  }
  
  method accept : IO::Socket ($peer_ref : Sys::Socket::Sockaddr[] = undef) {
    
    my $fd = $self->{fd};
    
    my $timeout = $self->{Timeout};
    
    my $timeout_ref = (double[])undef;
    
    if ($timeout > 0) {
      $timeout_ref = [(double)$timeout];
    }
    
    my $client_fd = -1;
    my $client_socket_address = (Sys::Socket::Sockaddr)undef;
    
    while (1) {
      eval { $client_socket_address = Sys->accept(\$client_fd, $fd); }
      
      if ($@) {
        my $again = 
          Sys::Socket->socket_errno == Sys::Socket::Errno->EWOULDBLOCK
          || Sys::Socket->socket_errno == Errno->EINTR
        ;
        
        if ($again) {
          Go->gosched_io_read($fd, $timeout_ref);
          if ($timeout_ref->[0] < 0) {
            die "The accept method timed out.";
          }
        }
        else {
          die $@;
        }
      }
      else {
        last;
      }
    }
    
    my $options = {
      Timeout => $timeout,
      fd => $client_fd,
      Domain => $self->sockdomain,
      Type => $self->socktype,
      Proto => $self->protocol,
    };
    
    my $client = $self->new_from_instance($options);
    
    if ($peer_ref) {
      $peer_ref->[0] = $client_socket_address;
    }
    
    return $client;
  }
  
  method sockname : Sys::Socket::Sockaddr () {
    my $fd = $self->{fd};
    
    my $sockaddr_sock = Sys->getsockname($fd);
    
    return $sockaddr_sock;
  }
  
  method peername : Sys::Socket::Sockaddr () {
    my $fd = $self->{fd};
    
    unless ($self->{peername}) {
      $self->{peername} = Sys->getpeername($fd);
    }
    
    my $sockaddr_peer = $self->{peername};
    
    return $sockaddr_peer;
  }
  
  method connected : Sys::Socket::Sockaddr () {
    my $sockaddr = (Sys::Socket::Sockaddr)undef;
    eval { $sockaddr = $self->peername; };
    return $sockaddr;
  }
  
  method send : int ($buffer : string, $flags : int = 0, $to : Sys::Socket::Sockaddr = undef, $length : int = -1, $buf_offset : int = 0) {
    if ($length < 0) {
      $length = length $buffer;
    }
    
    my $timeout_ref = (double[])undef;
    my $fd = $self->{fd};
    my $peername = (Sys::Socket::Sockaddr)undef;
    if ($to) {
      $peername = $to;
    }
    else {
      $peername = $self->peername;
    }
    
    unless ($self->peername) {
      die "send: Cannot determine peer address";
    }
    
    my $send_length = -1;
    while (1) {
      
      eval { $send_length = Sys->send($fd, $buffer, $flags, $to, $length, $buf_offset); }
      
      if ($@) {
        if (Sys::Socket->socket_errno == Sys::Socket::Errno->EWOULDBLOCK || Sys::Socket->socket_errno == Errno->EINTR) {
          Go->gosched_io_write($fd, $timeout_ref);
          if ($timeout_ref && $timeout_ref->[0] < 0) {
            $send_length = -1;
            last;
          }
        }
        else {
          die $@;
        }
      }
      else {
        last;
      }
    }
    
    $self->{peername} = $peername;
    
    return $send_length;
  }
  
  method recv : int ($buffer : mutable string, $length : int = -1, $flags : int = 0, $buf_offset : int = 0) {
    
    if ($length < 0) {
      $length = length $buffer;
    }
    
    my $timeout_ref = (double[])undef;
    my $fd = $self->{fd};
    my $recv_length = -1;
    while (1) {
      eval { $recv_length = Sys->recv($fd, $buffer, $length, $flags, $buf_offset); }
      
      if ($@) {
        if (Sys::Socket->socket_errno == Sys::Socket::Errno->EWOULDBLOCK || Sys::Socket->socket_errno == Errno->EINTR) {
          Go->gosched_io_read($fd, $timeout_ref);
          if ($timeout_ref && $timeout_ref->[0] < 0) {
            $recv_length = -1;
            last;
          }
        }
        else {
          die $@;
        }
      }
      else {
        last;
      }
    }
    
    return $recv_length;
  }
  
  method shutdown : int ($sockfd : int, $how : int) {
    $self->{peername} = undef;
    my $fd = $self->{fd};
    my $success = Sys->shutdown($fd, $how);
    return $success;
  }
  
  method getsockopt : string ($level : int, $optname : int) {
    my $fd = $self->{fd};
    my $optval = Sys->getsockopt($fd, $level, $optname);
    
    return $optval;
  }
  
  method setsockopt : int ($level : int, $optname : int, $optval : object of string|Int) {
    my $fd = $self->{fd};
    
    my $success = Sys->setsockopt($fd, $level, $optname, $optval);
    
    return $success;
  }
  
  method sockopt : string ($level : int, $optname : int) {
    return $self->getsockopt($level, $optname);
  }
  
  method set_sockopt : int ($level : int, $optname : int, $optval : object of string|Int) {
    return $self->setsockopt($level, $optname, $optval);
  }
  
  method atmark : int () {
    my $fd = $self->{fd};
    
    my $atmark = Sys::Socket->sockatmark($fd);
    
    return $atmark;
  }
  
  method timeout : int () {
    return $self->{Timeout};
  }
  
  method set_timeout : void ($timeout : int) {
    $self->{Timeout} = $timeout;
  }
  
  method sockdomain : int () {
    return $self->{Domain};
  }
  
  method socktype : int (){
    return $self->{Type};
  }
  
  method protocol : int () {
    return $self->{Proto};
  }
  
  method write : int ($string : string, $length : int = -1, $offset : int = 0) {
    return $self->send($string, 0, undef, $length, $offset);
  }
  
  method read : int ($string : mutable string, $length : int = -1, $offset : int = 0) {
    return $self->recv($string, $length, 0, $offset);
  }
  
  method syswrite : int ($string : string, $length : int = -1, $offset : int = 0) {
    return $self->send($string, 0, undef, $length, $offset);
  }
  
  method sysread : int ($string : mutable string, $length : int = -1, $offset : int = 0) {
    return $self->recv($string, $length, 0, $offset);
  }
}
