# Copyright (c) 2023 Yuki Kimoto
# MIT License

class IO::Socket extends IO::Handle {
  use Sys::Socket;
  use Sys::Socket::Constant as SOCKET;
  use Sys::Socket::Sockaddr;
  use Sys::Socket::Sockaddr::In;
  use Sys::Socket::Sockaddr::In6;
  use Sys::Socket::Sockaddr::Un;
  use Sys::Socket::In_addr;
  use Hash;
  use Errno;
  use Go;
  use Sys::Socket::Errno;
  use Fn;
  use Native::MethodCall;
  
  # Fields
  
  has Domain : protected int;
  has Type : protected int;
  has Proto : protected int;
  has Listen : protected int;
  has Timeout : protected double;
  
  # Class Methods
  static method new : IO::Socket ($options : object[] = undef) {
    
    my $self = new IO::Socket;
    
    $self->init($options);
    
    return $self;
  }
  
  # Instance Methods
  protected method init : void ($options : object[] = undef) {
    
    my $options_h = Hash->new($options);
    
    my $autoflush = $options_h->get_or_default_int("AutoFlush", 1);
    
    # Reason for Blocking => 1.
    # On Mac, non-blocking can only be set for sockets connected with connect or accept,
    # so when you create a socket, set it to blocking.
    $self->SUPER::init(Fn->merge_options($options, {FieldsInitOnly => 1, AutoFlush => $autoflush}));
    
    # Domain option
    my $domain = $options_h->get_or_default_int("Domain", -1);
    $self->{Domain} = $domain;
    
    # Proto option
    my $proto = $options_h->get_or_default_int("Proto", -1);
    $self->{Proto} = $proto;
    
    # Type option
    my $type = $options_h->get_or_default_int("Type", -1);
    $self->{Type} = $type;
    
    # Listen option
    my $listen_backlog = $options_h->get_or_default_int("Listen", -1);
    $self->{Listen} = $listen_backlog;
    
    # Timeout option
    my $timeout = $options_h->get_or_default_double("Timeout", 0.0);
    $self->{Timeout} = $timeout;
    
    # Blocking option
    my $blocking = $options_h->get_or_default_int("Blocking", 0);
    $self->{Blocking} = (byte)$blocking;
    
    my $fields_init_only = $options_h->get_or_default_int("FieldsInitOnly", 0);
    
    unless ($fields_init_only) {
      $self->configure;
    }
    
  }
  
  protected method configure : void () {
    
    my $blocking = $self->{Blocking};
    
    $self->socket;
    
    unless ($blocking) {
      $self->set_blocking(0);
    }
  }
  
  method option_names : string[] () {
    
    my $option_names = Array->merge_string(
      $self->SUPER::option_names,
      [
        "Domain",
        "Type",
        "Proto",
        "Listen",
        "Timeout",
      ]
    );
    
    return $option_names;
  }
  
  method DESTROY : void () {
    
    if ($self->opened) {
      $self->close;
    }
  }
  
  method timeout : double () {
    return $self->{Timeout};
  }
  
  method set_timeout : void ($timeout : double) {
    $self->{Timeout} = $timeout;
  }
  
  method sockdomain : int () {
    return $self->{Domain};
  }
  
  method socktype : int (){
    return $self->{Type};
  }
  
  method protocol : int () {
    return $self->{Proto};
  }
  
  method socket : void () {
    
    my $domain = $self->{Domain};
    
    my $type = $self->{Type};
    
    my $protocol = $self->{Proto};
    
    my $fd = -1;
    Sys->socket(\$fd, $domain, $type, $protocol);
    
    $self->{FD} = $fd;
  }
  
  method shutdown : void ($how : int) {
    
    my $fd = $self->{FD};
    
    Sys->shutdown($fd, $how);
  }
  
  method close : void () {
    
    unless ($self->opened) {
      die "This socket is not opened or already closed.";
    }
    
    my $fd = $self->{FD};
    
    Sys::Socket->close($fd);
    $self->{FD} = -1;
  }
  
  method connect : void ($sockaddr : Sys::Socket::Sockaddr) {
    
    my $timeout = $self->{Timeout};
    
    my $fd = $self->{FD};
    
    eval { Sys->connect($fd, $sockaddr); }
    
    if ($@) {
      my $again = 
        Sys::Socket::Errno->errno == Sys::Socket::Errno->EWOULDBLOCK
        || Sys::Socket::Errno->errno == Sys::Socket::Errno->EINPROGRESS
        || Sys::Socket::Errno->errno == Errno->EINTR
      ;
      
      if ($again) {
        Go->gosched_io_write($fd, $timeout);
      }
      else {
        die $@;
      }
    }
  }
  
  method bind : void ($sockaddr : Sys::Socket::Sockaddr) {
    
    my $fd = $self->{FD};
    
    Sys->bind($fd, $sockaddr);
  }
  
  method listen : void () {
    
    my $fd = $self->{FD};
    
    my $listen = $self->{Listen};
    
    unless ($listen > 0) {
      die "\"Listen\" field must be greater than 0.";
    }
    
    Sys->listen($fd, $listen);
  }
  
  method accept : IO::Socket ($peer_ref : Sys::Socket::Sockaddr[] = undef) {
    
    my $fd = $self->{FD};
    
    my $timeout = $self->{Timeout};
    
    my $client_fd = -1;
    my $client_sockaddr = (Sys::Socket::Sockaddr)undef;
    
    while (1) {
      eval { $client_sockaddr = Sys->accept(\$client_fd, $fd); }
      
      if ($@) {
        my $again = 
          Sys::Socket::Errno->errno == Sys::Socket::Errno->EWOULDBLOCK
          || Sys::Socket::Errno->errno == Errno->EINTR
        ;
        
        if ($again) {
          Go->gosched_io_read($fd, $timeout);
        }
        else {
          die $@;
        }
      }
      else {
        last;
      }
    }
    
    my $options = {
      Timeout => $timeout,
      FD => $client_fd,
      Domain => $self->{Domain},
      Type => $self->{Type},
      Proto => $self->{Proto},
      Blocking => (int)$self->{Blocking},
      FieldsInitOnly => 1,
    };
    
    my $class = type_name $self;
    my $client = (IO::Socket)Native::MethodCall->call_class_method($class, "new", [(object)$options]);
    
    unless ($self->{Blocking}) {
      $self->set_blocking(0);
    }
    
    if ($peer_ref) {
      $peer_ref->[0] = $client_sockaddr;
    }
    
    return $client;
  }
  
  method recvfrom : int ($buffer : mutable string, $length : int, $flags : int, $from_ref : Sys::Socket::Sockaddr[], $offset : int = 0) {
    
    if ($length < 0) {
      $length = length $buffer;
    }
    
    my $timeout = $self->{Timeout};
    
    my $fd = $self->{FD};
    my $recv_length = -1;
    while (1) {
      eval { $recv_length = Sys->recvfrom($fd, $buffer, $length, $flags, $from_ref, $offset); }
      
      if ($@) {
        if (Sys::Socket::Errno->errno == Sys::Socket::Errno->EWOULDBLOCK || Sys::Socket::Errno->errno == Errno->EINTR) {
          Go->gosched_io_read($fd, $timeout);
        }
        else {
          die $@;
        }
      }
      else {
        last;
      }
    }
    
    return $recv_length;
  }
  
  method sendto : int ($buffer : string, $flags : int, $to : Sys::Socket::Sockaddr, $length : int = -1, $offset : int = 0) {
    if ($length < 0) {
      $length = length $buffer;
    }
    
    my $timeout = $self->{Timeout};
    
    my $fd = $self->{FD};
    
    my $send_length = -1;
    while (1) {
      
      eval { $send_length = Sys->sendto($fd, $buffer, $flags, $to, $length, $offset); }
      
      if ($@) {
        if (Sys::Socket::Errno->errno == Sys::Socket::Errno->EWOULDBLOCK || Sys::Socket::Errno->errno == Errno->EINTR) {
          Go->gosched_io_write($fd, $timeout);
        }
        else {
          die $@;
        }
      }
      else {
        last;
      }
    }
    
    return $send_length;
  }
  
  method recv : int ($buffer : mutable string, $length : int = -1, $flags : int = 0, $offset : int = 0) {
    
    return $self->recvfrom($buffer, $length, $flags, undef, $offset);
  }
  
  method send : int ($buffer : string, $flags : int = 0, $length : int = -1, $offset : int = 0) {
    
    return $self->sendto($buffer, $flags, undef, $length, $offset);
  }
  
  method read : int ($buffer : mutable string, $length : int = -1, $offset : int = 0) {
    
    return $self->recv($buffer, $length, 0, $offset);
  }
  
  method write : int ($buffer : string, $length : int = -1, $offset : int = 0) {
    
    return $self->send($buffer, 0, $length, $offset);
  }
  
  method sockname : Sys::Socket::Sockaddr () {
    
    my $fd = $self->{FD};
    
    my $sockaddr_sock = Sys->getsockname($fd);
    
    return $sockaddr_sock;
  }
  
  method peername : Sys::Socket::Sockaddr () {
    
    my $fd = $self->{FD};
    
    my $sockaddr_peer = Sys->getpeername($fd);
    
    return $sockaddr_peer;
  }
  
  method connected : Sys::Socket::Sockaddr () {
    
    my $sockaddr = (Sys::Socket::Sockaddr)undef;
    
    eval { $sockaddr = $self->peername; };
    
    return $sockaddr;
  }
  
  method atmark : int () {
    
    my $fd = $self->{FD};
    
    my $atmark = Sys::Socket->sockatmark($fd);
    
    return $atmark;
  }
  
  method sockopt : string ($level : int, $option_name : int) {
    
    my $fd = $self->{FD};
    
    my $option_value = Sys->getsockopt($fd, $level, $option_name);
    
    return $option_value;
  }
  
  method setsockopt : void ($level : int, $option_name : int, $option_value : object of string|Int) {
    
    my $fd = $self->{FD};
    
    Sys->setsockopt($fd, $level, $option_name, $option_value);
  }
  
}
