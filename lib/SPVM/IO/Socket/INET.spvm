# Copyright (c) 2023 Yuki Kimoto
# MIT License

class IO::Socket::INET extends IO::Socket::INET::Base {
  
  use Sys::Socket::Constant as SOCKET;
  use Sys::Socket::Sockaddr;
  use Sys::Socket::Sockaddr::In;
  use Sys::Socket::In_addr;
  use Sys::Socket::Util;
  
  
  # Class Methods
  static method new : IO::Socket::INET ($options : object[] = undef) {
    
    my $self = new IO::Socket::INET;
    
    $self->init($options);
    
    return $self;
  }
  
  # Instance Methods
  method new_from_instance : IO::Socket::INET ($options : object[] = undef) {
    return IO::Socket::INET->new($options);
  }
  
  method option_names : string[] () {
    
    my $option_names = Array->merge_string(
      $self->SUPER::option_names,
      [
        "PeerAddr",
        "PeerPort",
        "LocalAddr",
        "LocalPort",
        "ReuseAddr",
        "ReusePort",
        "Broadcast",
        "MultiHomed",
      ]
    );
    
    return $option_names;
  }
  
  protected method init : void ($options : object[] = undef) {
    
    Fn->check_option_names($options, $self->option_names);
    
    $self->SUPER::init($options);
  }
  
  method sockaddr : Sys::Socket::In_addr () {
    my $sockaddr_in_sock = (Sys::Socket::Sockaddr::In)$self->sockname;
    
    my $sockaddr = $sockaddr_in_sock->sin_addr;
    
    return $sockaddr;
  }
  
  method sockport : int () {
    my $sockaddr_in_sock = (Sys::Socket::Sockaddr::In)$self->sockname;
    
    my $sockport_network_byte_order = $sockaddr_in_sock->sin_port;
    
    my $sockport = Sys::Socket->ntohs((short)$sockport_network_byte_order);
    
    return $sockport;
  }
  
  method sockhost : string () {
    my $in_addr_sock = $self->sockaddr;
    
    my $sockhost = (string)undef;
    if ($in_addr_sock) {
      $sockhost = Sys::Socket::Util->inet_ntop($self->{Domain}, $in_addr_sock);
    }
    return $sockhost;
  }
  
  method peeraddr : Sys::Socket::In_addr () {
    my $sockaddr_in = $self->peername;
    
    my $in_addr = $sockaddr_in->(Sys::Socket::Sockaddr::In)->sin_addr;
    
    return $in_addr;
  }
  
  method peerport : int () {
    my $sockaddr_in_peer = (Sys::Socket::Sockaddr::In)$self->peername;
    
    my $peerport_network_byte_order = $sockaddr_in_peer->sin_port;
    
    my $peerport = Sys::Socket->ntohs((short)$peerport_network_byte_order);
    
    return $peerport;
  }
  
  method peerhost : string () {
    my $in_addr_peer = $self->peeraddr;
    
    my $peerhost = (string)undef;
    if ($in_addr_peer) {
      $peerhost = Sys::Socket::Util->inet_ntop($self->{Domain}, $in_addr_peer);
    }
    return $peerhost;
  }
  
}
