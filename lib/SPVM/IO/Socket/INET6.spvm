# Copyright (c) 2023 Yuki Kimoto
# MIT License

class IO::Socket::INET6 extends IO::Socket {
  use Sys::Socket::Constant as SOCKET;
  use Sys::Socket::Sockaddr;
  use Sys::Socket::Sockaddr::In6;
  use Sys::Socket::In6_addr;
  use Sys::Socket::Util;
  
  # Fields
  has PeerAddr : string;
  has PeerPort : int;
  has LocalAddr : string;
  has LocalPort : int;
  has ReuseAddr : int;
  has ReusePort : int;
  has Broadcast : int;
  has MultiHomed : int;

=pod TODO

PeerHost    (Synonym for PeerAddr)
LocalHost   (Synonym for LocalAddr)
Reuse       (Deprecated prefer ReuseAddr)

=cut
  
  has peer_address : string;
  has peer_port : int;
  has local_address : string;
  has local_port : int;
  has proto_number : int;
  
  # Class Methods
  private method create_socket_address : Sys::Socket::Sockaddr ($address : string, $port : int) {
    
    # Socket information
    my $socket_address = Sys::Socket::Sockaddr::In6->new;
    $socket_address->set_sin6_family(SOCKET->AF_INET6);
    $socket_address->set_sin6_port(Sys::Socket->htons((short)$port));
    
    my $res_ref = new Sys::Socket::AddrinfoLinkedList[1];
    
    my $hints = Sys::Socket::Addrinfo->new;
    $hints->set_ai_family(SOCKET->AF_INET6);
    
    Sys::Socket->getaddrinfo($address, undef, $hints, $res_ref);
    
    my $res = $res_ref->[0];
    
    if ($res) {
      my $res_array = $res->to_array;
      $socket_address->set_sin6_addr($res_array->[0]->ai_addr->(Sys::Socket::Sockaddr::In6)->sin6_addr);
    }
    else {
      die "Sys::Socket->getaddrinfo cannot get an address.";
    }
    
    return $socket_address;
  }
  
  static method new : IO::Socket::INET6 ($options : object[] = undef) {
    
    my $self = new IO::Socket::INET6;
    
    $self->init($options);
    
    return $self;
  }
  
  # Instance Methods
  method new_from_instance : IO::Socket::INET6 ($options : object[] = undef) {
    return IO::Socket::INET6->new($options);
  }
  
  method option_names : string[] () {
    
    my $option_names = Array->merge_string(
      $self->SUPER::option_names,
      [
        "PeerAddr",
        "PeerPort",
        "LocalAddr",
        "LocalPort",
        "ReuseAddr",
        "ReusePort",
        "Broadcast",
        "MultiHomed",
      ]
    );
    
    return $option_names;
  }
  
  protected method init : void ($options : object[] = undef) {
    
    Fn->check_option_names($options, $self->option_names);
    
    $self->SUPER::init($options);
  }
  
  method sockaddr : Sys::Socket::In6_addr () {
    my $sockaddr_in6_sock = (Sys::Socket::Sockaddr::In6)$self->sockname;
    
    my $sockaddr = $sockaddr_in6_sock->sin6_addr;
    
    return $sockaddr;
  }
  
  method sockport : int () {
    my $sockaddr_in6_sock = (Sys::Socket::Sockaddr::In6)$self->sockname;
    
    my $sockport_network_byte_order = $sockaddr_in6_sock->sin6_port;
    
    my $sockport = Sys::Socket->ntohs((short)$sockport_network_byte_order);
    
    return $sockport;
  }
  
  method sockhost : string () {
    my $in6_addr_sock = $self->sockaddr;
    
    my $sockhost = (string)undef;
    if ($in6_addr_sock) {
      $sockhost = Sys::Socket::Util->inet_ntop(SOCKET->AF_INET6, $in6_addr_sock);
    }
    return $sockhost;
  }
  
  method peeraddr : Sys::Socket::In6_addr () {
    my $sockaddr_in6 = $self->peername;
    
    my $in6_addr = $sockaddr_in6->(Sys::Socket::Sockaddr::In6)->sin6_addr;
    
    return $in6_addr;
  }
  
  method peerport : int () {
    my $sockaddr_in6_peer = (Sys::Socket::Sockaddr::In6)$self->peername;
    
    my $peerport_network_byte_order = $sockaddr_in6_peer->sin6_port;
    
    my $peerport = Sys::Socket->ntohs((short)$peerport_network_byte_order);
    
    return $peerport;
  }
  
  method peerhost : string () {
    my $sockaddr_in6_peer = (Sys::Socket::Sockaddr::In6)$self->peername;
    
    my $in6_addr_peer = $self->peeraddr;
    
    my $peerhost = (string)undef;
    if ($in6_addr_peer) {
      $peerhost = Sys::Socket::Util->inet_ntop(SOCKET->AF_INET6, $in6_addr_peer);
    }
    return $peerhost;
  }
  
}
