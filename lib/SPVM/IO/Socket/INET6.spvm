# Copyright (c) 2023 Yuki Kimoto
# MIT License

class IO::Socket::INET6 extends IO::Socket::INET::Base {
  use Sys::Socket::Constant as SOCKET;
  use Sys::Socket::Sockaddr;
  use Sys::Socket::Sockaddr::In6;
  use Sys::Socket::In6_addr;
  use Sys::Socket::Util;
  
  static method new : IO::Socket::INET6 ($options : object[] = undef) {
    
    my $self = new IO::Socket::INET6;
    
    $options = Fn->merge_options($options, {Domain => SOCKET->AF_INET6});
    
    $self->init($options);
    
    return $self;
  }
  
  # Instance Methods
  method new_from_instance : IO::Socket::INET6 ($options : object[] = undef) {
    return IO::Socket::INET6->new($options);
  }
  
  # Class Methods
  method create_socket_address : Sys::Socket::Sockaddr ($address : string, $port : int) {
    
    # Socket information
    my $socket_address = Sys::Socket::Sockaddr::In6->new;
    $socket_address->set_sin6_family(SOCKET->AF_INET6);
    $socket_address->set_sin6_port(Sys::Socket->htons((short)$port));
    
    my $res_ref = new Sys::Socket::AddrinfoLinkedList[1];
    
    my $hints = Sys::Socket::Addrinfo->new;
    $hints->set_ai_family(SOCKET->AF_INET6);
    
    Sys::Socket->getaddrinfo($address, undef, $hints, $res_ref);
    
    my $res = $res_ref->[0];
    
    if ($res) {
      my $res_array = $res->to_array;
      $socket_address->set_sin6_addr($res_array->[0]->ai_addr->(Sys::Socket::Sockaddr::In6)->sin6_addr);
    }
    else {
      die "Sys::Socket->getaddrinfo cannot get an address.";
    }
    
    return $socket_address;
  }
  
}
