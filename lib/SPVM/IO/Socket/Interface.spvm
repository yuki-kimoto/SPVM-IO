class IO::Socket::Interface : interface_t {
  use Sys::Socket::Sockaddr;
  
  required method has_interfaces : int ();
  
  method timeout : int ();
  method sockdomain : int ();
  method socktype : int ();
  method protocol : int ();
  method peername : Sys::Socket::Sockaddr ();
  method fd : int ();
  method listen_backlog : int ();
  method connect : int ($address : Sys::Socket::Sockaddr);
  method recv : int ($buffer : mutable string, $length = -1 : int, $flags = 0 : int);
  method send : int ($buffer : string, $flags = 0 : int, $to = undef : Sys::Socket::Sockaddr);
  method close : int ();
  method fileno : int ();
  method opened : int ();
  method listen : int ($queue = 5 : int);
  method bind : int ($address : Sys::Socket::Sockaddr);
  method sockname : Sys::Socket::Sockaddr ();
  method shutdown : int ($sockfd : int, $how : int);
  method atmark : int ();
  method setsockopt : int ($level : int, $optname : int, $optval : int);
  method getsockopt : int ($level : int, $optname : int);
  method connected : Sys::Socket::Sockaddr ();
  method socket : int ($domain : int, $type : int, $protocol = 0 : int);
  method socketpair : int[] ($domain : int, $type : int, $protocol : int);
  method accept : IO::Socket::Interface ($peer_ref = undef : Sys::Socket::Sockaddr[]);
  method new_instance : IO::Socket::Interface ($options = undef : object[]);
}
