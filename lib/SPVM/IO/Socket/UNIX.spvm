# Copyright (c) 2023 Yuki Kimoto
# MIT License

class IO::Socket::UNIX extends IO::Socket {
  use Sys::Socket::Constant as SOCKET;
  use Sys::Socket::Util;
  use Array;
  
  # Fields
  has Local : string;
  
  has Peer : string;
  
  # Class Methods
  static method new : IO::Socket::UNIX ($options : object[] = undef) {
    
    my $self = new IO::Socket::UNIX;
    
    $self->init($options);
    
    $self->configure;
    
    return $self;
  }
  
  # Instance Methods
  protected method option_names : string[] () {
    
    my $option_names = Array->merge_string(
      $self->SUPER::option_names,
      [
        "Local",
        "Peer",
      ]
    );
    
    return $option_names;
  }
  
  protected method init : void ($options : object[] = undef) {
    
    my $options_h = Hash->new($options);
    
    # Domain option
    my $domain = SOCKET->AF_UNIX;
    
    # Type option
    my $type = $options_h->get_or_default_int("Type", SOCKET->SOCK_STREAM);
    
    # Proto option
    my $proto = 0;
    
    $self->SUPER::init(Fn->merge_options($options, {Domain => $domain, Proto => $proto, Type => $type}));
    
    # Peer option
    my $peer = $options_h->get_or_default_string("Peer", undef);
    $self->{Peer} = $peer;
    
    # Local option
    my $local = $options_h->get_or_default_string("Local", undef);
    $self->{Local} = $local;
    
    if ($peer && $local) {
      die "Peer option and Local option cannot be used together.";
    }
  }
  
  protected method configure : void () {
    
    my $peer = $self->{Peer};
    
    my $local = $self->{Local};
    
    my $listen = $self->{Listen};
    
    my $fd = $self->{FD};
    
    unless ($fd >= 0) {
      $self->socket;
    }
    
    # Client
    if ($peer) {
      my $sockaddr = Sys::Socket::Util->sockaddr_un($peer);
      $self->{Sockaddr} = $sockaddr;
      $self->connect;
    }
    # Server
    elsif ($listen > 0) {
      my $sockaddr = Sys::Socket::Util->sockaddr_un($local);
      $self->{Sockaddr} = $sockaddr;
      $self->bind;
      $self->listen;
    }
    # Accepted client
    elsif ($fd > 0) {
      # Do nothing
    }
    else {
      die "Peer option must be sepcified if this socket is a clienet socket. Listen option must be a positive number if this socket is a server socket.";
    }
    
    $self->set_blocking(0);
  }
  
  method hostpath : string () {
    my $sock_sockaddr_un = (Sys::Socket::Sockaddr::Un)$self->sockname;
    
    my $hostpath = $sock_sockaddr_un->sun_path;
    
    return $hostpath;
  }
  
  method peerpath : string () {
    my $peer_sockaddr_un = (Sys::Socket::Sockaddr::Un)$self->peername;
    
    my $peerpath = $peer_sockaddr_un->sun_path;
    
    return $peerpath;
  }
  
  method accept : IO::Socket::UNIX ($peer_ref : Sys::Socket::Sockaddr[] = undef) {
    return (IO::Socket::UNIX)$self->SUPER::accept($peer_ref);
  }
  
}
